{"ast":null,"code":"var _s = $RefreshSig$();\n\nimport React from \"react\";\n/*export function useFetch() {\n  const [{data, isLoading}, setData] = React.useState({ data: [], isLoading: true });\n  const guilds = ['TIK', 'AK', 'Athene', 'AS', 'IK', 'Inkubio', 'KIK', 'MK', 'PJK', 'PT', 'TF', 'VK'];\n  React.useEffect(() => {\n    fetch(\"/events\", {\n      method: 'POST',\n      body: JSON.stringify({\n        guildNames: guilds,\n        startDateTimeFrame : new Date(),\n        endDateTimeFrame : getNext4MonthsEvents()\n      }),\n      headers: {'Content-type': 'application/json; charset=UTF-8'},\n    })\n      .then((res) => res.json())\n      .then((data) => {\n        var dataString = JSON.stringify(data.response);\n        //console.log(\"dataString \", dataString);\n        var result = JSON.parse(dataString);\n        //console.log(\"result \", result);\n       \n        setData({data: result, isLoading: false})\n      });\n  }, []);\n\n  return [isLoading, data];\n}*/\n\nexport function useFetch() {\n  _s();\n\n  const [isLoading, setIsLoading] = React.useState(false);\n  const [error, setError] = React.useState(false);\n  const [list, setList] = React.useState([]);\n  const sendQuery = React.useCallback(async () => {\n    try {\n      await setIsLoading(true);\n      const guilds = ['TIK', 'AK', 'Athene', 'AS', 'IK', 'Inkubio', 'KIK', 'MK', 'PJK', 'PT', 'TF', 'VK'];\n      let res = fetch(\"/events\", {\n        method: 'POST',\n        body: JSON.stringify({\n          guildNames: guilds,\n          startDateTimeFrame: new Date(),\n          endDateTimeFrame: getNext4MonthsEvents()\n        }),\n        headers: {\n          'Content-type': 'application/json; charset=UTF-8'\n        }\n      }).then(res => res.json()).then(data => {\n        var dataString = JSON.stringify(data.response);\n        console.log(\"result \", JSON.parse(dataString));\n        return JSON.parse(dataString);\n      });\n      await setList(prev => [...prev, ...res.data]);\n      setIsLoading(false);\n    } catch (error) {\n      if (React.axios.isCancel(error)) return; // (*)\n\n      setError(error);\n    }\n\n    return () => React.cancel(); // (*)\n  }, []);\n  React.useEffect(() => {\n    setList([]);\n  }, []);\n  React.useEffect(() => {\n    sendQuery();\n  }, [sendQuery]);\n  return {\n    isLoading,\n    list\n  };\n}\n\n_s(useFetch, \"y8tpC5XMVHMnm1zJOMKfzZJSUSU=\");\n\nexport function getNext4MonthsEvents() {\n  var date = new Date();\n  date.setMonth(date.getMonth() + 4);\n  return date.toISOString();\n}","map":{"version":3,"names":["React","useFetch","isLoading","setIsLoading","useState","error","setError","list","setList","sendQuery","useCallback","guilds","res","fetch","method","body","JSON","stringify","guildNames","startDateTimeFrame","Date","endDateTimeFrame","getNext4MonthsEvents","headers","then","json","data","dataString","response","console","log","parse","prev","axios","isCancel","cancel","useEffect","date","setMonth","getMonth","toISOString"],"sources":["/Users/noora/Development/amplifyapp/ReactApp/src/hooks/useFetch.js"],"sourcesContent":["import React from \"react\";\n\n/*export function useFetch() {\n  const [{data, isLoading}, setData] = React.useState({ data: [], isLoading: true });\n  const guilds = ['TIK', 'AK', 'Athene', 'AS', 'IK', 'Inkubio', 'KIK', 'MK', 'PJK', 'PT', 'TF', 'VK'];\n  React.useEffect(() => {\n    fetch(\"/events\", {\n      method: 'POST',\n      body: JSON.stringify({\n        guildNames: guilds,\n        startDateTimeFrame : new Date(),\n        endDateTimeFrame : getNext4MonthsEvents()\n      }),\n      headers: {'Content-type': 'application/json; charset=UTF-8'},\n    })\n      .then((res) => res.json())\n      .then((data) => {\n        var dataString = JSON.stringify(data.response);\n        //console.log(\"dataString \", dataString);\n        var result = JSON.parse(dataString);\n        //console.log(\"result \", result);\n       \n        setData({data: result, isLoading: false})\n      });\n  }, []);\n\n  return [isLoading, data];\n}*/\n\nexport function useFetch() {\n  const [isLoading, setIsLoading] = React.useState(false);\n  const [error, setError] = React.useState(false);\n  const [list, setList] = React.useState([]);\n  \n  const sendQuery = React.useCallback(\n    async () => {   \n      try {\n        await setIsLoading(true);\n        const guilds = ['TIK', 'AK', 'Athene', 'AS', 'IK', 'Inkubio', 'KIK', 'MK', 'PJK', 'PT', 'TF', 'VK'];\n        let res = fetch(\"/events\", {\n          method: 'POST',\n          body: JSON.stringify({\n          guildNames: guilds,\n          startDateTimeFrame : new Date(),\n          endDateTimeFrame : getNext4MonthsEvents()\n          }),\n          headers: {'Content-type': 'application/json; charset=UTF-8'},\n        })\n          .then((res) => res.json())\n          .then((data) => {\n            var dataString = JSON.stringify(data.response);\n            console.log(\"result \", JSON.parse(dataString));\n            return JSON.parse(dataString);         \n        });\n        await setList(prev => [...prev, ...res.data]);\n       \n        setIsLoading(false);\n      }\n      catch (error) {\n        if (React.axios.isCancel(error)) return; // (*)\n        setError(error);\n      }\n      return () => React.cancel(); // (*)\n    },\n    []\n  );\n  React.useEffect(() => {\n    setList([]);\n  }, []);\n  React.useEffect(() => {\n    sendQuery();\n  }, [sendQuery]);\n  return { isLoading, list};\n}\n\nexport function getNext4MonthsEvents(){\n    var date = new Date();\n    date.setMonth(date.getMonth() + 4);\n    return date.toISOString();\n  }"],"mappings":";;AAAA,OAAOA,KAAP,MAAkB,OAAlB;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,OAAO,SAASC,QAAT,GAAoB;EAAA;;EACzB,MAAM,CAACC,SAAD,EAAYC,YAAZ,IAA4BH,KAAK,CAACI,QAAN,CAAe,KAAf,CAAlC;EACA,MAAM,CAACC,KAAD,EAAQC,QAAR,IAAoBN,KAAK,CAACI,QAAN,CAAe,KAAf,CAA1B;EACA,MAAM,CAACG,IAAD,EAAOC,OAAP,IAAkBR,KAAK,CAACI,QAAN,CAAe,EAAf,CAAxB;EAEA,MAAMK,SAAS,GAAGT,KAAK,CAACU,WAAN,CAChB,YAAY;IACV,IAAI;MACF,MAAMP,YAAY,CAAC,IAAD,CAAlB;MACA,MAAMQ,MAAM,GAAG,CAAC,KAAD,EAAQ,IAAR,EAAc,QAAd,EAAwB,IAAxB,EAA8B,IAA9B,EAAoC,SAApC,EAA+C,KAA/C,EAAsD,IAAtD,EAA4D,KAA5D,EAAmE,IAAnE,EAAyE,IAAzE,EAA+E,IAA/E,CAAf;MACA,IAAIC,GAAG,GAAGC,KAAK,CAAC,SAAD,EAAY;QACzBC,MAAM,EAAE,MADiB;QAEzBC,IAAI,EAAEC,IAAI,CAACC,SAAL,CAAe;UACrBC,UAAU,EAAEP,MADS;UAErBQ,kBAAkB,EAAG,IAAIC,IAAJ,EAFA;UAGrBC,gBAAgB,EAAGC,oBAAoB;QAHlB,CAAf,CAFmB;QAOzBC,OAAO,EAAE;UAAC,gBAAgB;QAAjB;MAPgB,CAAZ,CAAL,CASPC,IATO,CASDZ,GAAD,IAASA,GAAG,CAACa,IAAJ,EATP,EAUPD,IAVO,CAUDE,IAAD,IAAU;QACd,IAAIC,UAAU,GAAGX,IAAI,CAACC,SAAL,CAAeS,IAAI,CAACE,QAApB,CAAjB;QACAC,OAAO,CAACC,GAAR,CAAY,SAAZ,EAAuBd,IAAI,CAACe,KAAL,CAAWJ,UAAX,CAAvB;QACA,OAAOX,IAAI,CAACe,KAAL,CAAWJ,UAAX,CAAP;MACH,CAdS,CAAV;MAeA,MAAMnB,OAAO,CAACwB,IAAI,IAAI,CAAC,GAAGA,IAAJ,EAAU,GAAGpB,GAAG,CAACc,IAAjB,CAAT,CAAb;MAEAvB,YAAY,CAAC,KAAD,CAAZ;IACD,CArBD,CAsBA,OAAOE,KAAP,EAAc;MACZ,IAAIL,KAAK,CAACiC,KAAN,CAAYC,QAAZ,CAAqB7B,KAArB,CAAJ,EAAiC,OADrB,CAC6B;;MACzCC,QAAQ,CAACD,KAAD,CAAR;IACD;;IACD,OAAO,MAAML,KAAK,CAACmC,MAAN,EAAb,CA3BU,CA2BmB;EAC9B,CA7Be,EA8BhB,EA9BgB,CAAlB;EAgCAnC,KAAK,CAACoC,SAAN,CAAgB,MAAM;IACpB5B,OAAO,CAAC,EAAD,CAAP;EACD,CAFD,EAEG,EAFH;EAGAR,KAAK,CAACoC,SAAN,CAAgB,MAAM;IACpB3B,SAAS;EACV,CAFD,EAEG,CAACA,SAAD,CAFH;EAGA,OAAO;IAAEP,SAAF;IAAaK;EAAb,CAAP;AACD;;GA5CeN,Q;;AA8ChB,OAAO,SAASqB,oBAAT,GAA+B;EAClC,IAAIe,IAAI,GAAG,IAAIjB,IAAJ,EAAX;EACAiB,IAAI,CAACC,QAAL,CAAcD,IAAI,CAACE,QAAL,KAAkB,CAAhC;EACA,OAAOF,IAAI,CAACG,WAAL,EAAP;AACD"},"metadata":{},"sourceType":"module"}
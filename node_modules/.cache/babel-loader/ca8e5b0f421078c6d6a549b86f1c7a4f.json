{"ast":null,"code":"var _jsxFileName = \"/Users/noora/Development/amplifyapp/ReactApp/src/pages/home.js\",\n    _s = $RefreshSig$();\n\nimport React from 'react';\nimport FullCalendar from '@fullcalendar/react';\nimport dayGridPlugin from '@fullcalendar/daygrid';\nimport timeGridPlugin from '@fullcalendar/timegrid';\nimport interactionPlugin from '@fullcalendar/interaction';\nimport momentTimezonePlugin from '@fullcalendar/moment-timezone';\nimport Popup from './components/Popup';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst Home = () => {\n  _s();\n\n  const [error, setError] = React.useState(false);\n  const [response, setResponse] = React.useState([]);\n  React.state = {\n    showPopup: false\n  };\n  React.state = {\n    event: null\n  };\n\n  function openPopupHandler() {\n    this.setState({\n      showPopup: true\n    });\n  }\n\n  function closePopupHandler() {\n    this.setState({\n      showPopup: false\n    });\n  }\n\n  async function fetchData() {\n    try {\n      const guilds = ['AK', 'AS', 'Athene', 'IK', 'Inkubio', 'KIK', 'MK', 'PJK', 'PT', 'TIK', 'TF', 'VK', 'Prodeko', 'FK'];\n      await Promise.all([await fetch(\"/events\", {\n        method: 'POST',\n        body: JSON.stringify({\n          guildNames: guilds,\n          startDateTimeFrame: new Date(),\n          endDateTimeFrame: getNext4MonthsEvents()\n        }),\n        headers: {\n          'Content-type': 'application/json; charset=UTF-8'\n        }\n      }).then(res => res.json()).then(data => {\n        var dataString = JSON.stringify(data.response);\n        var result = JSON.parse(dataString);\n        console.log(\"result\", result);\n        setResponse(result);\n      })]);\n    } catch (error) {\n      console.log(error);\n      setError(true);\n    }\n  }\n\n  React.useEffect(() => {\n    fetchData();\n  }, []);\n\n  function getNext4MonthsEvents() {\n    var date = new Date();\n    date.setMonth(date.getMonth() + 4);\n    return date.toISOString();\n  }\n\n  if (error) {\n    return /*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \" Oops.. something went wrong! \"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 63,\n      columnNumber: 3\n    }, this);\n  }\n\n  let popup = null;\n\n  if (this.state.showPopup) {\n    popup = /*#__PURE__*/_jsxDEV(Popup, {\n      message: this.state.event,\n      closeMe: closePopupHandler\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 68,\n      columnNumber: 16\n    }, this);\n  }\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"container\",\n    children: [response.length > 0 && response.map(list => /*#__PURE__*/_jsxDEV(FullCalendar, {\n      plugins: [dayGridPlugin, timeGridPlugin, interactionPlugin, momentTimezonePlugin],\n      initialView: \"timeGridDay\",\n      contentHeight: \"auto\",\n      validRange: {\n        start: new Date(),\n        end: getNext4MonthsEvents()\n      },\n      eventTimeFormat: {\n        hour: '2-digit',\n        minute: '2-digit',\n        hour12: false\n      } //headerToolbar={false}\n      //dayHeaders={false}\n      ,\n      dayHeaderContent: Object.keys(list)[0],\n      dayHeaderClassNames: \"guild-name \" + Object.keys(list)[0],\n      slotMinTime: \"08:00:00\",\n      slotMaxTime: \"24:00:00\",\n      events: Object.values(list)[0] //eventColor=\"#CF9FFF\"\n      ,\n      eventColor: list.color,\n      nowIndicator: true,\n      eventClick: e => {\n        this.SetDate({\n          event: e\n        });\n        openPopupHandler();\n      },\n      timeZone: \"Europe/Helsinki\"\n    }, Object.keys(list)[0], false, {\n      fileName: _jsxFileName,\n      lineNumber: 76,\n      columnNumber: 6\n    }, this)), popup]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 73,\n    columnNumber: 3\n  }, this);\n};\n\n_s(Home, \"uI1k1uzOGQKTJYCQYVZAN4y1ifk=\");\n\n_c = Home;\nexport default Home;\n\nvar _c;\n\n$RefreshReg$(_c, \"Home\");","map":{"version":3,"names":["React","FullCalendar","dayGridPlugin","timeGridPlugin","interactionPlugin","momentTimezonePlugin","Popup","Home","error","setError","useState","response","setResponse","state","showPopup","event","openPopupHandler","setState","closePopupHandler","fetchData","guilds","Promise","all","fetch","method","body","JSON","stringify","guildNames","startDateTimeFrame","Date","endDateTimeFrame","getNext4MonthsEvents","headers","then","res","json","data","dataString","result","parse","console","log","useEffect","date","setMonth","getMonth","toISOString","popup","length","map","list","start","end","hour","minute","hour12","Object","keys","values","color","e","SetDate"],"sources":["/Users/noora/Development/amplifyapp/ReactApp/src/pages/home.js"],"sourcesContent":["import React from 'react';\nimport FullCalendar from '@fullcalendar/react';\nimport dayGridPlugin from '@fullcalendar/daygrid';\nimport timeGridPlugin from '@fullcalendar/timegrid';\nimport interactionPlugin from '@fullcalendar/interaction';\nimport momentTimezonePlugin from '@fullcalendar/moment-timezone';\nimport Popup from './components/Popup';\n\n\nconst Home = () => {\n\n  const [error, setError] = React.useState(false);\n  const [response, setResponse] = React.useState([]);\n  React.state = {showPopup: false};\n  React.state = {event: null};\n\n  function openPopupHandler() {\n    this.setState({showPopup: true});\n  }\n  \n  function closePopupHandler() {\n    this.setState({showPopup: false});\n  }\n  async function fetchData() {\n    try {\n      const guilds = ['AK', 'AS', 'Athene', 'IK', 'Inkubio', 'KIK', 'MK', 'PJK', 'PT', 'TIK', 'TF', 'VK', 'Prodeko', 'FK'];\n      await Promise.all([\n       (\n         await fetch(\"/events\", {\n          method: 'POST',\n          body: JSON.stringify({\n            guildNames: guilds,\n            startDateTimeFrame : new Date(),\n            endDateTimeFrame : getNext4MonthsEvents()\n          }),\n          headers: {'Content-type': 'application/json; charset=UTF-8'},\n        }).then((res) => res.json())\n        .then((data) => {\n          var dataString = JSON.stringify(data.response);\n          var result = JSON.parse(dataString); \n          console.log(\"result\" , result);     \n          setResponse(result);\n        }))\n     ]);\n   } catch (error) {\n     console.log(error);\n     setError(true);\n   }\n }\n \n React.useEffect(() => {\n   fetchData();\n }, []);\n\n function getNext4MonthsEvents(){\n  var date = new Date();\n  date.setMonth(date.getMonth() + 4);\n  return date.toISOString();\n}\n\n if(error) {\n  return (\n  <h1> Oops.. something went wrong! </h1>\n  )\n}\nlet popup = null;\n    if(this.state.showPopup) {\n      popup = (<Popup message={this.state.event} closeMe={closePopupHandler}/>);\n    }\n\nreturn (  \n  \n  <div className='container'>\n    {response.length > 0 && response.map((list) =>  (\n      \n     <FullCalendar     \n        plugins={[dayGridPlugin, timeGridPlugin, interactionPlugin, momentTimezonePlugin]}\n        initialView=\"timeGridDay\"\n        contentHeight={\"auto\"}\n        validRange={{\n        start: new Date(),\n        end: getNext4MonthsEvents()\n        }}\n        eventTimeFormat={{hour:'2-digit', minute: '2-digit', hour12: false}}\n        //headerToolbar={false}\n        //dayHeaders={false}\n        dayHeaderContent={Object.keys(list)[0]}\n        dayHeaderClassNames={\"guild-name \" + Object.keys(list)[0] }\n        slotMinTime={\"08:00:00\"}\n        slotMaxTime={\"24:00:00\"}\n        key={Object.keys(list)[0]}\n        events={Object.values(list)[0]}\n        //eventColor=\"#CF9FFF\"\n        eventColor={list.color}\n        nowIndicator\n        eventClick={(e) => {\n          this.SetDate({event:e})\n          openPopupHandler() \n        }}\n        timeZone=\"Europe/Helsinki\"\n      />\n    \n    ))}\n    {popup}\n    </div>      \n  );\n\n\n\n};\n\nexport default Home;"],"mappings":";;;AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAOC,YAAP,MAAyB,qBAAzB;AACA,OAAOC,aAAP,MAA0B,uBAA1B;AACA,OAAOC,cAAP,MAA2B,wBAA3B;AACA,OAAOC,iBAAP,MAA8B,2BAA9B;AACA,OAAOC,oBAAP,MAAiC,+BAAjC;AACA,OAAOC,KAAP,MAAkB,oBAAlB;;;AAGA,MAAMC,IAAI,GAAG,MAAM;EAAA;;EAEjB,MAAM,CAACC,KAAD,EAAQC,QAAR,IAAoBT,KAAK,CAACU,QAAN,CAAe,KAAf,CAA1B;EACA,MAAM,CAACC,QAAD,EAAWC,WAAX,IAA0BZ,KAAK,CAACU,QAAN,CAAe,EAAf,CAAhC;EACAV,KAAK,CAACa,KAAN,GAAc;IAACC,SAAS,EAAE;EAAZ,CAAd;EACAd,KAAK,CAACa,KAAN,GAAc;IAACE,KAAK,EAAE;EAAR,CAAd;;EAEA,SAASC,gBAAT,GAA4B;IAC1B,KAAKC,QAAL,CAAc;MAACH,SAAS,EAAE;IAAZ,CAAd;EACD;;EAED,SAASI,iBAAT,GAA6B;IAC3B,KAAKD,QAAL,CAAc;MAACH,SAAS,EAAE;IAAZ,CAAd;EACD;;EACD,eAAeK,SAAf,GAA2B;IACzB,IAAI;MACF,MAAMC,MAAM,GAAG,CAAC,IAAD,EAAO,IAAP,EAAa,QAAb,EAAuB,IAAvB,EAA6B,SAA7B,EAAwC,KAAxC,EAA+C,IAA/C,EAAqD,KAArD,EAA4D,IAA5D,EAAkE,KAAlE,EAAyE,IAAzE,EAA+E,IAA/E,EAAqF,SAArF,EAAgG,IAAhG,CAAf;MACA,MAAMC,OAAO,CAACC,GAAR,CAAY,CAEf,MAAMC,KAAK,CAAC,SAAD,EAAY;QACtBC,MAAM,EAAE,MADc;QAEtBC,IAAI,EAAEC,IAAI,CAACC,SAAL,CAAe;UACnBC,UAAU,EAAER,MADO;UAEnBS,kBAAkB,EAAG,IAAIC,IAAJ,EAFF;UAGnBC,gBAAgB,EAAGC,oBAAoB;QAHpB,CAAf,CAFgB;QAOtBC,OAAO,EAAE;UAAC,gBAAgB;QAAjB;MAPa,CAAZ,CAAL,CAQJC,IARI,CAQEC,GAAD,IAASA,GAAG,CAACC,IAAJ,EARV,EASNF,IATM,CASAG,IAAD,IAAU;QACd,IAAIC,UAAU,GAAGZ,IAAI,CAACC,SAAL,CAAeU,IAAI,CAAC1B,QAApB,CAAjB;QACA,IAAI4B,MAAM,GAAGb,IAAI,CAACc,KAAL,CAAWF,UAAX,CAAb;QACAG,OAAO,CAACC,GAAR,CAAY,QAAZ,EAAuBH,MAAvB;QACA3B,WAAW,CAAC2B,MAAD,CAAX;MACD,CAdM,CAFS,CAAZ,CAAN;IAkBF,CApBA,CAoBC,OAAO/B,KAAP,EAAc;MACdiC,OAAO,CAACC,GAAR,CAAYlC,KAAZ;MACAC,QAAQ,CAAC,IAAD,CAAR;IACD;EACF;;EAEDT,KAAK,CAAC2C,SAAN,CAAgB,MAAM;IACpBxB,SAAS;EACV,CAFD,EAEG,EAFH;;EAIA,SAASa,oBAAT,GAA+B;IAC9B,IAAIY,IAAI,GAAG,IAAId,IAAJ,EAAX;IACAc,IAAI,CAACC,QAAL,CAAcD,IAAI,CAACE,QAAL,KAAkB,CAAhC;IACA,OAAOF,IAAI,CAACG,WAAL,EAAP;EACD;;EAEA,IAAGvC,KAAH,EAAU;IACT,oBACA;MAAA;IAAA;MAAA;MAAA;MAAA;IAAA,QADA;EAGD;;EACD,IAAIwC,KAAK,GAAG,IAAZ;;EACI,IAAG,KAAKnC,KAAL,CAAWC,SAAd,EAAyB;IACvBkC,KAAK,gBAAI,QAAC,KAAD;MAAO,OAAO,EAAE,KAAKnC,KAAL,CAAWE,KAA3B;MAAkC,OAAO,EAAEG;IAA3C;MAAA;MAAA;MAAA;IAAA,QAAT;EACD;;EAEL,oBAEE;IAAK,SAAS,EAAC,WAAf;IAAA,WACGP,QAAQ,CAACsC,MAAT,GAAkB,CAAlB,IAAuBtC,QAAQ,CAACuC,GAAT,CAAcC,IAAD,iBAEpC,QAAC,YAAD;MACG,OAAO,EAAE,CAACjD,aAAD,EAAgBC,cAAhB,EAAgCC,iBAAhC,EAAmDC,oBAAnD,CADZ;MAEG,WAAW,EAAC,aAFf;MAGG,aAAa,EAAE,MAHlB;MAIG,UAAU,EAAE;QACZ+C,KAAK,EAAE,IAAItB,IAAJ,EADK;QAEZuB,GAAG,EAAErB,oBAAoB;MAFb,CAJf;MAQG,eAAe,EAAE;QAACsB,IAAI,EAAC,SAAN;QAAiBC,MAAM,EAAE,SAAzB;QAAoCC,MAAM,EAAE;MAA5C,CARpB,CASG;MACA;MAVH;MAWG,gBAAgB,EAAEC,MAAM,CAACC,IAAP,CAAYP,IAAZ,EAAkB,CAAlB,CAXrB;MAYG,mBAAmB,EAAE,gBAAgBM,MAAM,CAACC,IAAP,CAAYP,IAAZ,EAAkB,CAAlB,CAZxC;MAaG,WAAW,EAAE,UAbhB;MAcG,WAAW,EAAE,UAdhB;MAgBG,MAAM,EAAEM,MAAM,CAACE,MAAP,CAAcR,IAAd,EAAoB,CAApB,CAhBX,CAiBG;MAjBH;MAkBG,UAAU,EAAEA,IAAI,CAACS,KAlBpB;MAmBG,YAAY,MAnBf;MAoBG,UAAU,EAAGC,CAAD,IAAO;QACjB,KAAKC,OAAL,CAAa;UAAC/C,KAAK,EAAC8C;QAAP,CAAb;QACA7C,gBAAgB;MACjB,CAvBJ;MAwBG,QAAQ,EAAC;IAxBZ,GAeQyC,MAAM,CAACC,IAAP,CAAYP,IAAZ,EAAkB,CAAlB,CAfR;MAAA;MAAA;MAAA;IAAA,QAFuB,CAD1B,EA+BGH,KA/BH;EAAA;IAAA;IAAA;IAAA;EAAA,QAFF;AAuCC,CApGD;;GAAMzC,I;;KAAAA,I;AAsGN,eAAeA,IAAf"},"metadata":{},"sourceType":"module"}
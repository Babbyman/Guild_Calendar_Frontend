{"ast":null,"code":"var _s = $RefreshSig$();\n\nimport React from \"react\";\nexport default function useFetch() {\n  _s();\n\n  const [data, isLoading, setData] = React.useState({\n    data: [],\n    isLoading: true\n  });\n  const guilds = ['TIK', 'AK', 'Athene', 'AS', 'IK', 'Inkubio', 'KIK', 'MK', 'PJK', 'PT', 'TF', 'VK', 'Prodeko', 'FK'];\n  React.useEffect(() => {\n    fetch(\"/events\", {\n      method: 'POST',\n      body: JSON.stringify({\n        guildNames: guilds,\n        startDateTimeFrame: new Date(),\n        endDateTimeFrame: getNext4MonthsEvents()\n      }),\n      headers: {\n        'Content-type': 'application/json; charset=UTF-8'\n      }\n    }).then(res => res.json()).then(data => {\n      var dataString = JSON.stringify(data.response);\n      var result = JSON.parse(dataString);\n      console.log(result);\n      setData({\n        data: result,\n        isLoading: false\n      });\n    });\n  }, []);\n  return [isLoading, data];\n}\n\n_s(useFetch, \"w9r909RmJMzhcctRG+rkwBMeMHk=\");\n\nexport function getNext4MonthsEvents() {\n  var date = new Date();\n  date.setMonth(date.getMonth() + 4);\n  return date.toISOString();\n}","map":{"version":3,"names":["React","useFetch","data","isLoading","setData","useState","guilds","useEffect","fetch","method","body","JSON","stringify","guildNames","startDateTimeFrame","Date","endDateTimeFrame","getNext4MonthsEvents","headers","then","res","json","dataString","response","result","parse","console","log","date","setMonth","getMonth","toISOString"],"sources":["/Users/noora/Development/amplifyapp/ReactApp/src/hooks/useFetch.js"],"sourcesContent":["import React from \"react\";\n\nexport default function useFetch() {\n\n  const [data, isLoading, setData] = React.useState({ data: [], isLoading: true });\n  const guilds = ['TIK', 'AK', 'Athene', 'AS', 'IK', 'Inkubio', 'KIK', 'MK', 'PJK', 'PT', 'TF', 'VK', 'Prodeko', 'FK' ];\n  React.useEffect(() => {\n    fetch(\"/events\", {\n      method: 'POST',\n      body: JSON.stringify({\n        guildNames: guilds,\n        startDateTimeFrame : new Date(),\n        endDateTimeFrame : getNext4MonthsEvents()\n      }),\n      headers: {'Content-type': 'application/json; charset=UTF-8'},\n    })\n      .then((res) => res.json())\n      .then((data) => {\n        var dataString = JSON.stringify(data.response);\n        var result = JSON.parse(dataString);\n        console.log(result);\n        setData({ data: result, isLoading: false })\n      });\n  }, []);\n\n  return [isLoading, data];\n}\n\nexport function getNext4MonthsEvents(){\n    var date = new Date();\n    date.setMonth(date.getMonth() + 4);\n    return date.toISOString();\n  }"],"mappings":";;AAAA,OAAOA,KAAP,MAAkB,OAAlB;AAEA,eAAe,SAASC,QAAT,GAAoB;EAAA;;EAEjC,MAAM,CAACC,IAAD,EAAOC,SAAP,EAAkBC,OAAlB,IAA6BJ,KAAK,CAACK,QAAN,CAAe;IAAEH,IAAI,EAAE,EAAR;IAAYC,SAAS,EAAE;EAAvB,CAAf,CAAnC;EACA,MAAMG,MAAM,GAAG,CAAC,KAAD,EAAQ,IAAR,EAAc,QAAd,EAAwB,IAAxB,EAA8B,IAA9B,EAAoC,SAApC,EAA+C,KAA/C,EAAsD,IAAtD,EAA4D,KAA5D,EAAmE,IAAnE,EAAyE,IAAzE,EAA+E,IAA/E,EAAqF,SAArF,EAAgG,IAAhG,CAAf;EACAN,KAAK,CAACO,SAAN,CAAgB,MAAM;IACpBC,KAAK,CAAC,SAAD,EAAY;MACfC,MAAM,EAAE,MADO;MAEfC,IAAI,EAAEC,IAAI,CAACC,SAAL,CAAe;QACnBC,UAAU,EAAEP,MADO;QAEnBQ,kBAAkB,EAAG,IAAIC,IAAJ,EAFF;QAGnBC,gBAAgB,EAAGC,oBAAoB;MAHpB,CAAf,CAFS;MAOfC,OAAO,EAAE;QAAC,gBAAgB;MAAjB;IAPM,CAAZ,CAAL,CASGC,IATH,CASSC,GAAD,IAASA,GAAG,CAACC,IAAJ,EATjB,EAUGF,IAVH,CAUSjB,IAAD,IAAU;MACd,IAAIoB,UAAU,GAAGX,IAAI,CAACC,SAAL,CAAeV,IAAI,CAACqB,QAApB,CAAjB;MACA,IAAIC,MAAM,GAAGb,IAAI,CAACc,KAAL,CAAWH,UAAX,CAAb;MACAI,OAAO,CAACC,GAAR,CAAYH,MAAZ;MACApB,OAAO,CAAC;QAAEF,IAAI,EAAEsB,MAAR;QAAgBrB,SAAS,EAAE;MAA3B,CAAD,CAAP;IACD,CAfH;EAgBD,CAjBD,EAiBG,EAjBH;EAmBA,OAAO,CAACA,SAAD,EAAYD,IAAZ,CAAP;AACD;;GAxBuBD,Q;;AA0BxB,OAAO,SAASgB,oBAAT,GAA+B;EAClC,IAAIW,IAAI,GAAG,IAAIb,IAAJ,EAAX;EACAa,IAAI,CAACC,QAAL,CAAcD,IAAI,CAACE,QAAL,KAAkB,CAAhC;EACA,OAAOF,IAAI,CAACG,WAAL,EAAP;AACD"},"metadata":{},"sourceType":"module"}
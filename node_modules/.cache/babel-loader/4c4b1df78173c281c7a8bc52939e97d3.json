{"ast":null,"code":"var _jsxFileName = \"/Users/noora/Development/amplifyapp/ReactApp/src/pages/home.js\",\n    _s = $RefreshSig$();\n\nimport React from 'react';\nimport FullCalendar from '@fullcalendar/react';\nimport dayGridPlugin from '@fullcalendar/daygrid';\nimport timeGridPlugin from '@fullcalendar/timegrid';\nimport interactionPlugin from '@fullcalendar/interaction';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst Home = () => {\n  _s();\n\n  const [data, setData] = React.useState(null);\n  const guilds = ['TIK', 'AK', 'Athene', 'AS', 'IK', 'Inkubio', 'KIK', 'MK', 'PJK', 'PT', 'TF', 'VK', 'Prodeko', 'FK'];\n  React.useEffect(() => {\n    fetch(\"/events\", {\n      method: 'POST',\n      body: JSON.stringify({\n        guildNames: guilds,\n        startDateTimeFrame: new Date(),\n        endDateTimeFrame: getNext4MonthsEvents()\n      }),\n      headers: {\n        'Content-type': 'application/json; charset=UTF-8'\n      }\n    }).then(res => res.json()).then(data => {\n      var dataString = JSON.stringify(data.response);\n      var result = JSON.parse(dataString);\n      setData(result);\n    });\n  }, []);\n\n  function getNext4MonthsEvents() {\n    var date = new Date();\n    date.setMonth(date.getMonth() + 4);\n    return date.toISOString();\n  }\n  /*const guildCalendars = data.map((list)=>\n      <FullCalendar\n      plugins={[dayGridPlugin, timeGridPlugin, interactionPlugin]}\n      initialView=\"timeGridDay\"\n      contentHeight={\"auto\"}\n      validRange={{\n      start: new Date(),\n      end: getNext4MonthsEvents()\n      }}\n      //dayHeaders={false}\n      dayHeaderContent={\"TEST\"}\n      dayHeaderClassNames={\"guild-name\"}\n      slotMinTime={\"08:00:00\"}\n      slotMaxTime={\"24:00:00\"}\n  \n      /*headerToolbar={{\n      center: 'dayGridMonth,timeGridWeek,timeGridDay new',\n      }}*/\n\n  /*customButtons={{\n  new: {\n      text: 'new',\n      click: () => console.log('new event'),\n  },\n  }}*/\n\n  /*  events={list}\n    eventColor=\"#CF9FFF\"\n    nowIndicator\n    dateClick={(e) => console.log(e.dateStr)}\n    eventClick={(e) => console.log(e.event.id)}\n    timeZone=\"Europe/Helsinki\"\n  />\n  );*/\n\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"container\",\n    children: /*#__PURE__*/_jsxDEV(FullCalendar, {\n      plugins: [dayGridPlugin, timeGridPlugin, interactionPlugin],\n      initialView: \"timeGridDay\",\n      contentHeight: \"auto\",\n      validRange: {\n        start: new Date(),\n        end: getNext4MonthsEvents()\n      } //dayHeaders={false}\n      ,\n      dayHeaderContent: \"TEST\",\n      dayHeaderClassNames: \"guild-name\",\n      slotMinTime: \"08:00:00\",\n      slotMaxTime: \"24:00:00\"\n      /*headerToolbar={{\n      center: 'dayGridMonth,timeGridWeek,timeGridDay new',\n      }}*/\n\n      /*customButtons={{\n      new: {\n          text: 'new',\n          click: () => console.log('new event'),\n      },\n      }}*/\n      ,\n      events: data,\n      eventColor: \"#CF9FFF\",\n      nowIndicator: true,\n      dateClick: e => console.log(e.dateStr),\n      eventClick: e => console.log(e.event.id),\n      timeZone: \"Europe/Helsinki\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 74,\n      columnNumber: 8\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 73,\n    columnNumber: 5\n  }, this);\n};\n\n_s(Home, \"fQZRxy/+nAZ7NLS1X4dVhrlp8Go=\");\n\n_c = Home;\nexport default Home;\n\nvar _c;\n\n$RefreshReg$(_c, \"Home\");","map":{"version":3,"names":["React","FullCalendar","dayGridPlugin","timeGridPlugin","interactionPlugin","Home","data","setData","useState","guilds","useEffect","fetch","method","body","JSON","stringify","guildNames","startDateTimeFrame","Date","endDateTimeFrame","getNext4MonthsEvents","headers","then","res","json","dataString","response","result","parse","date","setMonth","getMonth","toISOString","start","end","e","console","log","dateStr","event","id"],"sources":["/Users/noora/Development/amplifyapp/ReactApp/src/pages/home.js"],"sourcesContent":["import React from 'react';\nimport FullCalendar from '@fullcalendar/react';\nimport dayGridPlugin from '@fullcalendar/daygrid';\nimport timeGridPlugin from '@fullcalendar/timegrid';\nimport interactionPlugin from '@fullcalendar/interaction';\n\nconst Home = () => {\n\n    const [data, setData] = React.useState(null);\n    const guilds = ['TIK', 'AK', 'Athene', 'AS', 'IK', 'Inkubio', 'KIK', 'MK', 'PJK', 'PT', 'TF', 'VK', 'Prodeko', 'FK' ];\n\n    React.useEffect(() => {\n      fetch(\"/events\", {\n        method: 'POST',\n        body: JSON.stringify({\n          guildNames: guilds,\n          startDateTimeFrame : new Date(),\n          endDateTimeFrame : getNext4MonthsEvents()\n        }),\n        headers: {'Content-type': 'application/json; charset=UTF-8'},\n      })\n        .then((res) => res.json())\n        .then((data) => {\n          var dataString = JSON.stringify(data.response);\n          var result = JSON.parse(dataString);\n          setData(result)\n        });\n    }, []);\n\n    function getNext4MonthsEvents(){\n      var date = new Date();\n      date.setMonth(date.getMonth() + 4);\n      return date.toISOString();\n    }\n\n    /*const guildCalendars = data.map((list)=>\n        <FullCalendar\n        plugins={[dayGridPlugin, timeGridPlugin, interactionPlugin]}\n        initialView=\"timeGridDay\"\n        contentHeight={\"auto\"}\n        validRange={{\n        start: new Date(),\n        end: getNext4MonthsEvents()\n        }}\n        //dayHeaders={false}\n        dayHeaderContent={\"TEST\"}\n        dayHeaderClassNames={\"guild-name\"}\n        slotMinTime={\"08:00:00\"}\n        slotMaxTime={\"24:00:00\"}\n    \n        /*headerToolbar={{\n        center: 'dayGridMonth,timeGridWeek,timeGridDay new',\n        }}*/\n        /*customButtons={{\n        new: {\n            text: 'new',\n            click: () => console.log('new event'),\n        },\n        }}*/\n      /*  events={list}\n        eventColor=\"#CF9FFF\"\n        nowIndicator\n        dateClick={(e) => console.log(e.dateStr)}\n        eventClick={(e) => console.log(e.event.id)}\n        timeZone=\"Europe/Helsinki\"\n    />\n    );*/\n\n    \n  \n\n  return (\n    <div className='container'>\n       <FullCalendar\n        plugins={[dayGridPlugin, timeGridPlugin, interactionPlugin]}\n        initialView=\"timeGridDay\"\n        contentHeight={\"auto\"}\n        validRange={{\n        start: new Date(),\n        end: getNext4MonthsEvents()\n        }}\n        //dayHeaders={false}\n        dayHeaderContent={\"TEST\"}\n        dayHeaderClassNames={\"guild-name\"}\n        slotMinTime={\"08:00:00\"}\n        slotMaxTime={\"24:00:00\"}\n    \n        /*headerToolbar={{\n        center: 'dayGridMonth,timeGridWeek,timeGridDay new',\n        }}*/\n        /*customButtons={{\n        new: {\n            text: 'new',\n            click: () => console.log('new event'),\n        },\n        }}*/\n        events={data}\n        eventColor=\"#CF9FFF\"\n        nowIndicator\n        dateClick={(e) => console.log(e.dateStr)}\n        eventClick={(e) => console.log(e.event.id)}\n        timeZone=\"Europe/Helsinki\"\n    />\n    </div>\n      \n    );\n};\n\nexport default Home;"],"mappings":";;;AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAOC,YAAP,MAAyB,qBAAzB;AACA,OAAOC,aAAP,MAA0B,uBAA1B;AACA,OAAOC,cAAP,MAA2B,wBAA3B;AACA,OAAOC,iBAAP,MAA8B,2BAA9B;;;AAEA,MAAMC,IAAI,GAAG,MAAM;EAAA;;EAEf,MAAM,CAACC,IAAD,EAAOC,OAAP,IAAkBP,KAAK,CAACQ,QAAN,CAAe,IAAf,CAAxB;EACA,MAAMC,MAAM,GAAG,CAAC,KAAD,EAAQ,IAAR,EAAc,QAAd,EAAwB,IAAxB,EAA8B,IAA9B,EAAoC,SAApC,EAA+C,KAA/C,EAAsD,IAAtD,EAA4D,KAA5D,EAAmE,IAAnE,EAAyE,IAAzE,EAA+E,IAA/E,EAAqF,SAArF,EAAgG,IAAhG,CAAf;EAEAT,KAAK,CAACU,SAAN,CAAgB,MAAM;IACpBC,KAAK,CAAC,SAAD,EAAY;MACfC,MAAM,EAAE,MADO;MAEfC,IAAI,EAAEC,IAAI,CAACC,SAAL,CAAe;QACnBC,UAAU,EAAEP,MADO;QAEnBQ,kBAAkB,EAAG,IAAIC,IAAJ,EAFF;QAGnBC,gBAAgB,EAAGC,oBAAoB;MAHpB,CAAf,CAFS;MAOfC,OAAO,EAAE;QAAC,gBAAgB;MAAjB;IAPM,CAAZ,CAAL,CASGC,IATH,CASSC,GAAD,IAASA,GAAG,CAACC,IAAJ,EATjB,EAUGF,IAVH,CAUShB,IAAD,IAAU;MACd,IAAImB,UAAU,GAAGX,IAAI,CAACC,SAAL,CAAeT,IAAI,CAACoB,QAApB,CAAjB;MACA,IAAIC,MAAM,GAAGb,IAAI,CAACc,KAAL,CAAWH,UAAX,CAAb;MACAlB,OAAO,CAACoB,MAAD,CAAP;IACD,CAdH;EAeD,CAhBD,EAgBG,EAhBH;;EAkBA,SAASP,oBAAT,GAA+B;IAC7B,IAAIS,IAAI,GAAG,IAAIX,IAAJ,EAAX;IACAW,IAAI,CAACC,QAAL,CAAcD,IAAI,CAACE,QAAL,KAAkB,CAAhC;IACA,OAAOF,IAAI,CAACG,WAAL,EAAP;EACD;EAED;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;EACQ;AACR;AACA;AACA;AACA;AACA;;EACM;AACN;AACA;AACA;AACA;AACA;AACA;AACA;;;EAKE,oBACE;IAAK,SAAS,EAAC,WAAf;IAAA,uBACG,QAAC,YAAD;MACC,OAAO,EAAE,CAAC9B,aAAD,EAAgBC,cAAhB,EAAgCC,iBAAhC,CADV;MAEC,WAAW,EAAC,aAFb;MAGC,aAAa,EAAE,MAHhB;MAIC,UAAU,EAAE;QACZ6B,KAAK,EAAE,IAAIf,IAAJ,EADK;QAEZgB,GAAG,EAAEd,oBAAoB;MAFb,CAJb,CAQC;MARD;MASC,gBAAgB,EAAE,MATnB;MAUC,mBAAmB,EAAE,YAVtB;MAWC,WAAW,EAAE,UAXd;MAYC,WAAW,EAAE;MAEb;AACR;AACA;;MACQ;AACR;AACA;AACA;AACA;AACA;MAtBO;MAuBC,MAAM,EAAEd,IAvBT;MAwBC,UAAU,EAAC,SAxBZ;MAyBC,YAAY,MAzBb;MA0BC,SAAS,EAAG6B,CAAD,IAAOC,OAAO,CAACC,GAAR,CAAYF,CAAC,CAACG,OAAd,CA1BnB;MA2BC,UAAU,EAAGH,CAAD,IAAOC,OAAO,CAACC,GAAR,CAAYF,CAAC,CAACI,KAAF,CAAQC,EAApB,CA3BpB;MA4BC,QAAQ,EAAC;IA5BV;MAAA;MAAA;MAAA;IAAA;EADH;IAAA;IAAA;IAAA;EAAA,QADF;AAmCD,CApGD;;GAAMnC,I;;KAAAA,I;AAsGN,eAAeA,IAAf"},"metadata":{},"sourceType":"module"}
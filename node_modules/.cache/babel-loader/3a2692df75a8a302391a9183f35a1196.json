{"ast":null,"code":"var _jsxFileName = \"/Users/noora/Development/amplifyapp/ReactApp/src/pages/home.js\",\n    _s = $RefreshSig$();\n\nimport React from 'react';\nimport FullCalendar from '@fullcalendar/react';\nimport dayGridPlugin from '@fullcalendar/daygrid';\nimport timeGridPlugin from '@fullcalendar/timegrid';\nimport interactionPlugin from '@fullcalendar/interaction';\nimport { getNext4MonthsEvents } from '../hooks/useFetch';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst Home = () => {\n  _s();\n\n  const [details, setDetails] = React.useState();\n  const [error, setError] = React.useState(false);\n  const [response, setResponse] = React.useState([]);\n\n  async function fetchData() {\n    try {\n      const guilds = ['TIK', 'AK', 'Athene', 'AS', 'IK', 'Inkubio', 'KIK', 'MK', 'PJK', 'PT', 'TF', 'VK'];\n      const [response, details] = await Promise.all([await fetch(\"/events\", {\n        method: 'POST',\n        body: JSON.stringify({\n          guildNames: guilds,\n          startDateTimeFrame: new Date(),\n          endDateTimeFrame: getNext4MonthsEvents()\n        }),\n        headers: {\n          'Content-type': 'application/json; charset=UTF-8'\n        }\n      }).json()]);\n      setResponse(response);\n      setDetails(details);\n    } catch (error) {\n      console.log(error);\n      setError(true);\n    }\n  }\n\n  React.useEffect(() => {\n    fetchData();\n  }, []);\n  React.useEffect(() => {\n    console.log(response, details);\n  }, [response, details]);\n\n  if (error) {\n    return /*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \" Oops.. something went wrong!\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 48,\n      columnNumber: 3\n    }, this);\n  }\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"container\",\n    children: response.length > 0 && response.map(list => /*#__PURE__*/_jsxDEV(FullCalendar, {\n      plugins: [dayGridPlugin, timeGridPlugin, interactionPlugin],\n      initialView: \"timeGridDay\",\n      contentHeight: \"auto\",\n      validRange: {\n        start: new Date(),\n        end: getNext4MonthsEvents()\n      } //TODO need to add a unique key\n      //dayHeaders={false}\n      ,\n      dayHeaderContent: \"list[0].guild\",\n      dayHeaderClassNames: \"guild-name\",\n      slotMinTime: \"08:00:00\",\n      slotMaxTime: \"24:00:00\",\n      events: list,\n      eventColor: \"#CF9FFF\",\n      nowIndicator: true,\n      dateClick: e => console.log(e.dateStr),\n      eventClick: e => console.log(e.event.id),\n      timeZone: \"Europe/Helsinki\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 57,\n      columnNumber: 6\n    }, this))\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 54,\n    columnNumber: 3\n  }, this);\n};\n\n_s(Home, \"HsLN++rdMRRikx8ijFSgMZxOCvA=\");\n\n_c = Home;\nexport default Home;\n\nvar _c;\n\n$RefreshReg$(_c, \"Home\");","map":{"version":3,"names":["React","FullCalendar","dayGridPlugin","timeGridPlugin","interactionPlugin","getNext4MonthsEvents","Home","details","setDetails","useState","error","setError","response","setResponse","fetchData","guilds","Promise","all","fetch","method","body","JSON","stringify","guildNames","startDateTimeFrame","Date","endDateTimeFrame","headers","json","console","log","useEffect","length","map","list","start","end","e","dateStr","event","id"],"sources":["/Users/noora/Development/amplifyapp/ReactApp/src/pages/home.js"],"sourcesContent":["import React from 'react';\nimport FullCalendar from '@fullcalendar/react';\nimport dayGridPlugin from '@fullcalendar/daygrid';\nimport timeGridPlugin from '@fullcalendar/timegrid';\nimport interactionPlugin from '@fullcalendar/interaction';\nimport {getNext4MonthsEvents} from '../hooks/useFetch';\n\nconst Home = () => {\n\n  const [details, setDetails] = React.useState();\n  const [error, setError] = React.useState(false);\n  const [response, setResponse] = React.useState([]);\n  async function fetchData() {\n    try {\n      const guilds = ['TIK', 'AK', 'Athene', 'AS', 'IK', 'Inkubio', 'KIK', 'MK', 'PJK', 'PT', 'TF', 'VK'];\n     const [response, details] = await Promise.all([\n       (\n         await fetch(\"/events\", {\n          method: 'POST',\n          body: JSON.stringify({\n            guildNames: guilds,\n            startDateTimeFrame : new Date(),\n            endDateTimeFrame : getNext4MonthsEvents()\n          }),\n          headers: {'Content-type': 'application/json; charset=UTF-8'},\n        }).json()),\n     ]);\n \n     setResponse(response);\n     setDetails(details);\n   } catch (error) {\n     console.log(error);\n     setError(true);\n   }\n }\n \n React.useEffect(() => {\n   fetchData();\n }, []);\n \n React.useEffect(() => {\n   console.log(response, details);\n }, [response, details]);\n\n\n if(error) {\n  return (\n  <h1> Oops.. something went wrong!     \n  </h1>\n  )\n}\n\nreturn (  \n  <div className='container'>\n    {response.length > 0 && response.map((list) => (\n      \n     <FullCalendar     \n        plugins={[dayGridPlugin, timeGridPlugin, interactionPlugin]}\n        initialView=\"timeGridDay\"\n        contentHeight={\"auto\"}\n        validRange={{\n        start: new Date(),\n        end: getNext4MonthsEvents()\n        }}\n        //TODO need to add a unique key\n      \n        //dayHeaders={false}\n        dayHeaderContent={\"list[0].guild\"}\n        dayHeaderClassNames={\"guild-name\"}\n        slotMinTime={\"08:00:00\"}\n        slotMaxTime={\"24:00:00\"}\n    \n        events={list}\n        eventColor=\"#CF9FFF\"\n        nowIndicator\n        dateClick={(e) => console.log(e.dateStr)}\n        eventClick={(e) => console.log(e.event.id)}\n        timeZone=\"Europe/Helsinki\"\n      />\n    \n       ))}\n    </div>      \n  );\n\n\n\n};\n\nexport default Home;"],"mappings":"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"},"metadata":{},"sourceType":"module"}
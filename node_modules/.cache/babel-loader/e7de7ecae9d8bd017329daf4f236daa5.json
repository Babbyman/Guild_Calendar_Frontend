{"ast":null,"code":"var _jsxFileName = \"/Users/noora/Development/amplifyapp/ReactApp/src/pages/home.js\",\n    _s = $RefreshSig$();\n\nimport React from 'react';\nimport FullCalendar from '@fullcalendar/react';\nimport dayGridPlugin from '@fullcalendar/daygrid';\nimport timeGridPlugin from '@fullcalendar/timegrid';\nimport interactionPlugin from '@fullcalendar/interaction';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst Home = () => {\n  _s();\n\n  const [data, setData] = React.useState(null);\n  const guilds = ['TIK', 'AK', 'Athene', 'AS', 'IK', 'Inkubio', 'KIK', 'MK', 'PJK', 'PT', 'TF', 'VK', 'Prodeko', 'FK'];\n  const guildCalendars = data.map(list => /*#__PURE__*/_jsxDEV(FullCalendar, {\n    plugins: [dayGridPlugin, timeGridPlugin, interactionPlugin],\n    initialView: \"timeGridDay\",\n    contentHeight: \"auto\",\n    validRange: {\n      start: new Date(),\n      end: getNext4MonthsEvents()\n    } //dayHeaders={false}\n    ,\n    dayHeaderContent: \"TEST\",\n    dayHeaderClassNames: \"guild-name\",\n    slotMinTime: \"08:00:00\",\n    slotMaxTime: \"24:00:00\"\n    /*headerToolbar={{\n    center: 'dayGridMonth,timeGridWeek,timeGridDay new',\n    }}*/\n\n    /*customButtons={{\n    new: {\n        text: 'new',\n        click: () => console.log('new event'),\n    },\n    }}*/\n    ,\n    events: list,\n    eventColor: \"#CF9FFF\",\n    nowIndicator: true,\n    dateClick: e => console.log(e.dateStr),\n    eventClick: e => console.log(e.event.id),\n    timeZone: \"Europe/Helsinki\"\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 15,\n    columnNumber: 9\n  }, this));\n  React.useEffect(() => {\n    fetch(\"/events\", {\n      method: 'POST',\n      body: JSON.stringify({\n        guildNames: guilds,\n        startDateTimeFrame: new Date(),\n        endDateTimeFrame: getNext4MonthsEvents()\n      }),\n      headers: {\n        'Content-type': 'application/json; charset=UTF-8'\n      }\n    }).then(res => res.json()).then(data => {\n      console.log(\"data\", data);\n      var dataString = JSON.stringify(data.response);\n      var result = JSON.parse(dataString);\n      console.log(\"result \", result);\n      setData(result);\n    });\n  }, []);\n\n  function getNext4MonthsEvents() {\n    var date = new Date();\n    date.setMonth(date.getMonth() + 4);\n    return date.toISOString();\n  }\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"container\",\n    children: guildCalendars\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 75,\n    columnNumber: 5\n  }, this);\n};\n\n_s(Home, \"fQZRxy/+nAZ7NLS1X4dVhrlp8Go=\");\n\n_c = Home;\nexport default Home;\n\nvar _c;\n\n$RefreshReg$(_c, \"Home\");","map":{"version":3,"names":["React","FullCalendar","dayGridPlugin","timeGridPlugin","interactionPlugin","Home","data","setData","useState","guilds","guildCalendars","map","list","start","Date","end","getNext4MonthsEvents","e","console","log","dateStr","event","id","useEffect","fetch","method","body","JSON","stringify","guildNames","startDateTimeFrame","endDateTimeFrame","headers","then","res","json","dataString","response","result","parse","date","setMonth","getMonth","toISOString"],"sources":["/Users/noora/Development/amplifyapp/ReactApp/src/pages/home.js"],"sourcesContent":["import React from 'react';\nimport FullCalendar from '@fullcalendar/react';\nimport dayGridPlugin from '@fullcalendar/daygrid';\nimport timeGridPlugin from '@fullcalendar/timegrid';\nimport interactionPlugin from '@fullcalendar/interaction';\n\nconst Home = () => {\n\n    const [data, setData] = React.useState(null);\n    const guilds = ['TIK', 'AK', 'Athene', 'AS', 'IK', 'Inkubio', 'KIK', 'MK', 'PJK', 'PT', 'TF', 'VK', 'Prodeko', 'FK' ];\n\n    \n\n    const guildCalendars = data.map((list)=>\n        <FullCalendar\n        plugins={[dayGridPlugin, timeGridPlugin, interactionPlugin]}\n        initialView=\"timeGridDay\"\n        contentHeight={\"auto\"}\n        validRange={{\n        start: new Date(),\n        end: getNext4MonthsEvents()\n        }}\n        //dayHeaders={false}\n        dayHeaderContent={\"TEST\"}\n        dayHeaderClassNames={\"guild-name\"}\n        slotMinTime={\"08:00:00\"}\n        slotMaxTime={\"24:00:00\"}\n    \n        /*headerToolbar={{\n        center: 'dayGridMonth,timeGridWeek,timeGridDay new',\n        }}*/\n        /*customButtons={{\n        new: {\n            text: 'new',\n            click: () => console.log('new event'),\n        },\n        }}*/\n        events={list}\n        eventColor=\"#CF9FFF\"\n        nowIndicator\n        dateClick={(e) => console.log(e.dateStr)}\n        eventClick={(e) => console.log(e.event.id)}\n        timeZone=\"Europe/Helsinki\"\n    />\n    );\n\n    React.useEffect(() => {\n      fetch(\"/events\", {\n        method: 'POST',\n        body: JSON.stringify({\n          guildNames: guilds,\n          startDateTimeFrame : new Date(),\n          endDateTimeFrame : getNext4MonthsEvents()\n        }),\n        headers: {'Content-type': 'application/json; charset=UTF-8'},\n      })\n        .then((res) => res.json())\n        .then((data) => {\n            console.log(\"data\", data);\n          var dataString = JSON.stringify(data.response);\n          var result = JSON.parse(dataString);\n          console.log(\"result \", result);\n          setData(result)\n        });\n    }, []);\n\n    function getNext4MonthsEvents(){\n      var date = new Date();\n      date.setMonth(date.getMonth() + 4);\n      return date.toISOString();\n    }\n  \n\n  return (\n    <div className='container'>\n        {guildCalendars}\n    </div>\n      \n    );\n};\n\nexport default Home;"],"mappings":"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"},"metadata":{},"sourceType":"module"}
{"ast":null,"code":"var _jsxFileName = \"/Users/noora/Development/amplifyapp/ReactApp/src/pages/home.js\",\n    _s = $RefreshSig$();\n\nimport React from 'react';\nimport FullCalendar from '@fullcalendar/react';\nimport dayGridPlugin from '@fullcalendar/daygrid';\nimport timeGridPlugin from '@fullcalendar/timegrid';\nimport interactionPlugin from '@fullcalendar/interaction';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst Home = () => {\n  _s();\n\n  const [data, setData] = React.useState(null);\n  const guild = \"TF\";\n  const guilds = ['TIK', 'AK', 'Athene', 'AS', 'IK', 'Inkubio', 'KIK', 'MK', 'PJK', 'PT', 'TF', 'VK', 'Prodeko', 'FK'];\n  React.useEffect(() => {\n    fetch(\"/events\", {\n      method: 'POST',\n      body: JSON.stringify({\n        guildName: guild,\n        startDateTimeFrame: new Date(),\n        endDateTimeFrame: getNext4MonthsEvents()\n      }),\n      headers: {\n        'Content-type': 'application/json; charset=UTF-8'\n      }\n    }).then(res => res.json()).then(data => {\n      var dataString = JSON.stringify(data.response);\n      var result = JSON.parse(dataString);\n      console.log(\"result \", result);\n      setData(result);\n    });\n  }, []);\n\n  function getNext4MonthsEvents() {\n    var date = new Date();\n    date.setMonth(date.getMonth() + 4);\n    console.log(\"next4Month.toISOString()\", date.toISOString());\n    return date.toISOString();\n  }\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"container\",\n    children: [/*#__PURE__*/_jsxDEV(FullCalendar, {\n      plugins: [dayGridPlugin, timeGridPlugin, interactionPlugin],\n      initialView: \"timeGridDay\",\n      contentHeight: \"auto\",\n      validRange: {\n        start: new Date(),\n        end: getNext4MonthsEvents()\n      } //dayHeaders={false}\n      ,\n      dayHeaderContent: guild,\n      dayHeaderClassNames: \"guild-name\",\n      slotMinTime: \"08:00:00\",\n      slotMaxTime: \"24:00:00\"\n      /*headerToolbar={{\n        center: 'dayGridMonth,timeGridWeek,timeGridDay new',\n      }}*/\n\n      /*customButtons={{\n        new: {\n          text: 'new',\n          click: () => console.log('new event'),\n        },\n      }}*/\n      ,\n      events: data,\n      eventColor: \"#CF9FFF\",\n      nowIndicator: true,\n      dateClick: e => console.log(e.dateStr),\n      eventClick: e => console.log(e.event.id)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 43,\n      columnNumber: 5\n    }, this), /*#__PURE__*/_jsxDEV(FullCalendar, {\n      plugins: [dayGridPlugin, timeGridPlugin, interactionPlugin],\n      initialView: \"timeGridDay\",\n      contentHeight: \"auto\",\n      validRange: {\n        start: new Date(),\n        end: getNext4MonthsEvents()\n      } //dayHeaders={false}\n      ,\n      dayHeaderContent: guild,\n      dayHeaderClassNames: \"guild-name\",\n      slotMinTime: \"08:00:00\",\n      slotMaxTime: \"24:00:00\"\n      /*headerToolbar={{\n        center: 'dayGridMonth,timeGridWeek,timeGridDay new',\n      }}*/\n\n      /*customButtons={{\n        new: {\n          text: 'new',\n          click: () => console.log('new event'),\n        },\n      }}*/\n      ,\n      events: data,\n      eventColor: \"#CF9FFF\",\n      nowIndicator: true,\n      dateClick: e => console.log(e.dateStr),\n      eventClick: e => console.log(e.event.id)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 72,\n      columnNumber: 5\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 42,\n    columnNumber: 5\n  }, this);\n};\n\n_s(Home, \"fQZRxy/+nAZ7NLS1X4dVhrlp8Go=\");\n\n_c = Home;\nexport default Home;\n\nvar _c;\n\n$RefreshReg$(_c, \"Home\");","map":{"version":3,"names":["React","FullCalendar","dayGridPlugin","timeGridPlugin","interactionPlugin","Home","data","setData","useState","guild","guilds","useEffect","fetch","method","body","JSON","stringify","guildName","startDateTimeFrame","Date","endDateTimeFrame","getNext4MonthsEvents","headers","then","res","json","dataString","response","result","parse","console","log","date","setMonth","getMonth","toISOString","start","end","e","dateStr","event","id"],"sources":["/Users/noora/Development/amplifyapp/ReactApp/src/pages/home.js"],"sourcesContent":["import React from 'react';\nimport FullCalendar from '@fullcalendar/react';\nimport dayGridPlugin from '@fullcalendar/daygrid';\nimport timeGridPlugin from '@fullcalendar/timegrid';\nimport interactionPlugin from '@fullcalendar/interaction';\n\nconst Home = () => {\n\n    const [data, setData] = React.useState(null);\n    const guild = \"TF\";\n    const guilds = ['TIK', 'AK', 'Athene', 'AS', 'IK', 'Inkubio', 'KIK', 'MK', 'PJK', 'PT', 'TF', 'VK', 'Prodeko', 'FK' ];\n\n    React.useEffect(() => {\n      fetch(\"/events\", {\n        method: 'POST',\n        body: JSON.stringify({\n          guildName: guild,\n          startDateTimeFrame : new Date(),\n          endDateTimeFrame : getNext4MonthsEvents()\n        }),\n        headers: {'Content-type': 'application/json; charset=UTF-8'},\n      })\n        .then((res) => res.json())\n        .then((data) => {\n  \n          var dataString = JSON.stringify(data.response);\n          var result = JSON.parse(dataString);\n          console.log(\"result \", result);\n          setData(result)\n        });\n    }, []);\n\n    function getNext4MonthsEvents(){\n      var date = new Date();\n      date.setMonth(date.getMonth() + 4);\n      console.log(\"next4Month.toISOString()\" , date.toISOString());\n      return date.toISOString();\n    }\n  \n\n  return (\n    <div className='container'>\n    <FullCalendar\n      plugins={[dayGridPlugin, timeGridPlugin, interactionPlugin]}\n      initialView=\"timeGridDay\"\n      contentHeight={\"auto\"}\n      validRange={{\n        start: new Date(),\n        end: getNext4MonthsEvents()\n      }}\n      //dayHeaders={false}\n      dayHeaderContent={guild}\n      dayHeaderClassNames={\"guild-name\"}\n      slotMinTime={\"08:00:00\"}\n      slotMaxTime={\"24:00:00\"}\n     \n      /*headerToolbar={{\n        center: 'dayGridMonth,timeGridWeek,timeGridDay new',\n      }}*/\n      /*customButtons={{\n        new: {\n          text: 'new',\n          click: () => console.log('new event'),\n        },\n      }}*/\n      events={data}\n      eventColor=\"#CF9FFF\"\n      nowIndicator\n      dateClick={(e) => console.log(e.dateStr)}\n      eventClick={(e) => console.log(e.event.id)}\n    />\n    <FullCalendar\n      plugins={[dayGridPlugin, timeGridPlugin, interactionPlugin]}\n      initialView=\"timeGridDay\"\n      contentHeight={\"auto\"}\n      validRange={{\n        start: new Date(),\n        end: getNext4MonthsEvents()\n      }}\n      //dayHeaders={false}\n      dayHeaderContent={guild}\n      dayHeaderClassNames={\"guild-name\"}\n      slotMinTime={\"08:00:00\"}\n      slotMaxTime={\"24:00:00\"}\n     \n      /*headerToolbar={{\n        center: 'dayGridMonth,timeGridWeek,timeGridDay new',\n      }}*/\n      /*customButtons={{\n        new: {\n          text: 'new',\n          click: () => console.log('new event'),\n        },\n      }}*/\n      events={data}\n      eventColor=\"#CF9FFF\"\n      nowIndicator\n      dateClick={(e) => console.log(e.dateStr)}\n      eventClick={(e) => console.log(e.event.id)}\n    />\n    </div>\n      \n    );\n};\n\nexport default Home;\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}
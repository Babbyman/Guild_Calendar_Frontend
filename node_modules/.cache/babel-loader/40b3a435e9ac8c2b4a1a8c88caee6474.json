{"ast":null,"code":"var _jsxFileName = \"/Users/noora/Development/amplifyapp/ReactApp/src/pages/month.js\",\n    _s = $RefreshSig$();\n\nimport React from 'react';\nimport FullCalendar from '@fullcalendar/react';\nimport dayGridPlugin from '@fullcalendar/daygrid';\nimport timeGridPlugin from '@fullcalendar/timegrid';\nimport interactionPlugin from '@fullcalendar/interaction';\nimport momentTimezonePlugin from '@fullcalendar/moment-timezone';\nimport swal from 'sweetalert';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst Month = () => {\n  _s();\n\n  const [error, setError] = React.useState(false);\n  const [response, setResponse] = React.useState([]);\n  const guilds = ['AK', 'AS', 'Athene', 'IK', 'Inkubio', 'KIK', 'MK', 'PJK', 'PT', 'TIK', 'TF', 'VK', 'Prodeko', 'FK'];\n  const [filtered, setFiltered] = React.useState([]);\n  const [checkedState, setCheckedState] = React.useState(new Array(guilds.length).fill(true));\n\n  async function fetchData() {\n    try {\n      await Promise.all([await fetch(\"/events\", {\n        method: 'POST',\n        body: JSON.stringify({\n          guildNames: guilds,\n          startDateTimeFrame: getOneMonthFromNowEvents(),\n          endDateTimeFrame: getNext3MonthsEvents()\n        }),\n        headers: {\n          'Content-type': 'application/json; charset=UTF-8'\n        }\n      }).then(res => res.json()).then(data => {\n        var dataString = JSON.stringify(data.response);\n        var result = JSON.parse(dataString);\n        var array = [];\n\n        for (let i of result) {\n          array = array.concat(Object.values(i)[0]);\n        }\n\n        console.log(\"array \", array);\n        setResponse(array);\n        setFiltered(array);\n      })]);\n    } catch (error) {\n      console.log(error);\n      setError(true);\n    }\n  }\n\n  React.useEffect(() => {\n    fetchData();\n  }, []);\n\n  function getNext3MonthsEvents() {\n    var date = new Date();\n    date.setMonth(date.getMonth() + 3);\n    return date.toISOString();\n  }\n\n  function display3MonthsAfter() {\n    const setTo1Day = new Date(setTo1DayOfMonth());\n    setTo1Day.setMonth(setTo1Day.getMonth() + 3);\n    return setTo1Day.toISOString();\n  }\n\n  function setTo1DayOfMonth() {\n    const currentDate = new Date();\n    const setTo1DayOfMonth = new Date(currentDate.getFullYear(), currentDate.getMonth(), 1);\n    return setTo1DayOfMonth.toISOString();\n  }\n\n  function getOneMonthFromNowEvents() {\n    var date = new Date();\n    date.setDate(date.getDate() - 31);\n    return date.toISOString();\n  }\n\n  if (error) {\n    return /*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \" Oops.. something went wrong! \"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 79,\n      columnNumber: 13\n    }, this);\n  }\n\n  const handleChange = (position, name) => {\n    const updatedCheckedState = checkedState.map((item, index) => index === position ? !item : item);\n    setCheckedState(updatedCheckedState);\n\n    if (checkedState[position] === true) {\n      const filteredEvents = filtered.filter(value => value.guild !== name);\n      setFiltered(filteredEvents);\n    } else {\n      const toBeAppliedEvents = response.filter(x => x.guild === name);\n      const applied = [...filtered, ...toBeAppliedEvents];\n      setFiltered(applied);\n    }\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"container2\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      children: /*#__PURE__*/_jsxDEV(\"ul\", {\n        className: \"sorting-list\",\n        children: guilds.map((name, index) => {\n          return /*#__PURE__*/_jsxDEV(\"li\", {\n            children: /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"sorting-list-item\",\n              children: /*#__PURE__*/_jsxDEV(\"div\", {\n                children: [/*#__PURE__*/_jsxDEV(\"input\", {\n                  type: \"checkbox\",\n                  id: `custom-checkbox-${index}`,\n                  name: name,\n                  value: name,\n                  checked: checkedState[index],\n                  onChange: () => handleChange(index, name)\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 110,\n                  columnNumber: 41\n                }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n                  htmlFor: `custom-checkbox-${index}`,\n                  children: name\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 118,\n                  columnNumber: 41\n                }, this)]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 109,\n                columnNumber: 37\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 108,\n              columnNumber: 33\n            }, this)\n          }, index, false, {\n            fileName: _jsxFileName,\n            lineNumber: 107,\n            columnNumber: 29\n          }, this);\n        })\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 104,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 103,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(FullCalendar, {\n      plugins: [dayGridPlugin, timeGridPlugin, interactionPlugin, momentTimezonePlugin],\n      initialView: \"dayGridMonth\",\n      eventTimeFormat: {\n        hour: '2-digit',\n        minute: '2-digit',\n        hour12: false\n      },\n      firstDay: 1,\n      validRange: {\n        start: setTo1DayOfMonth(),\n        end: display3MonthsAfter()\n      },\n      fixedWeekCount: false,\n      eventOverlap: false,\n      events: filtered,\n      eventDisplay: \"list-item\",\n      nowIndicator: true,\n      eventClick: e => {\n        swal({\n          title: e.event.title,\n          text: \"Starting from: \" + e.event.start + \"\\n Description: \" + e.event.extendedProps.description + \"\\n Location: \" + e.event.extendedProps.location + \"\\n Organizer: \" + e.event.extendedProps.guild\n        });\n      },\n      timeZone: \"Europe/Helsinki\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 126,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 102,\n    columnNumber: 9\n  }, this);\n};\n\n_s(Month, \"ux9TU+2cH7h4+wZ5eCjLF12oFRA=\");\n\n_c = Month;\nexport default Month;\n\nvar _c;\n\n$RefreshReg$(_c, \"Month\");","map":{"version":3,"names":["React","FullCalendar","dayGridPlugin","timeGridPlugin","interactionPlugin","momentTimezonePlugin","swal","Month","error","setError","useState","response","setResponse","guilds","filtered","setFiltered","checkedState","setCheckedState","Array","length","fill","fetchData","Promise","all","fetch","method","body","JSON","stringify","guildNames","startDateTimeFrame","getOneMonthFromNowEvents","endDateTimeFrame","getNext3MonthsEvents","headers","then","res","json","data","dataString","result","parse","array","i","concat","Object","values","console","log","useEffect","date","Date","setMonth","getMonth","toISOString","display3MonthsAfter","setTo1Day","setTo1DayOfMonth","currentDate","getFullYear","setDate","getDate","handleChange","position","name","updatedCheckedState","map","item","index","filteredEvents","filter","value","guild","toBeAppliedEvents","x","applied","hour","minute","hour12","start","end","e","title","event","text","extendedProps","description","location"],"sources":["/Users/noora/Development/amplifyapp/ReactApp/src/pages/month.js"],"sourcesContent":["import React from 'react';\nimport FullCalendar from '@fullcalendar/react';\nimport dayGridPlugin from '@fullcalendar/daygrid';\nimport timeGridPlugin from '@fullcalendar/timegrid';\nimport interactionPlugin from '@fullcalendar/interaction';\nimport momentTimezonePlugin from '@fullcalendar/moment-timezone';\nimport swal from 'sweetalert';\n\nconst Month = () => {\n\n    const [error, setError] = React.useState(false);\n    const [response, setResponse] = React.useState([]);\n    const guilds = ['AK', 'AS', 'Athene', 'IK', 'Inkubio', 'KIK', 'MK', 'PJK', 'PT', 'TIK', 'TF', 'VK', 'Prodeko', 'FK'];\n    const [filtered, setFiltered] = React.useState([]);\n    const [checkedState, setCheckedState] = React.useState(new Array(guilds.length).fill(true));\n\n    async function fetchData() {\n        try {\n            await Promise.all([\n                (\n                    await fetch(\"/events\", {\n                        method: 'POST',\n                        body: JSON.stringify({\n                            guildNames: guilds,\n                            startDateTimeFrame: getOneMonthFromNowEvents(),\n                            endDateTimeFrame: getNext3MonthsEvents()\n                        }),\n                        headers: { 'Content-type': 'application/json; charset=UTF-8' },\n                    }).then((res) => res.json())\n                        .then((data) => {\n                            var dataString = JSON.stringify(data.response);\n                            var result = JSON.parse(dataString);\n                            var array = [];\n                            for (let i of result) {\n                                array = array.concat(Object.values(i)[0]);\n                            }\n                            console.log(\"array \", array);\n                            setResponse(array);\n                            setFiltered(array);\n                        }))\n            ]);\n        } catch (error) {\n            console.log(error);\n            setError(true);\n        }\n    }\n\n    React.useEffect(() => {\n        fetchData();\n    }, []);\n\n    function getNext3MonthsEvents() {\n        var date = new Date();\n        date.setMonth(date.getMonth() + 3);\n        return date.toISOString();\n    }\n\n    function display3MonthsAfter() {\n        const setTo1Day = new Date(setTo1DayOfMonth());\n        setTo1Day.setMonth(setTo1Day.getMonth() + 3);\n        return setTo1Day.toISOString();\n    }\n\n    function setTo1DayOfMonth() {\n        const currentDate = new Date();\n        const setTo1DayOfMonth = new Date(currentDate.getFullYear(), currentDate.getMonth(), 1);\n        return setTo1DayOfMonth.toISOString();\n\n    }\n\n    function getOneMonthFromNowEvents() {\n        var date = new Date();\n        date.setDate(date.getDate() - 31);\n        return date.toISOString();\n    }\n\n    if (error) {\n        return (\n            <h1> Oops.. something went wrong! </h1>\n        )\n    }\n\n    const handleChange = (position, name) => {\n        const updatedCheckedState = checkedState.map((item, index) =>\n            index === position ? !item : item\n        );\n\n        setCheckedState(updatedCheckedState);\n\n        if (checkedState[position] === true) {\n            const filteredEvents = filtered.filter(value => value.guild !== name);\n            setFiltered(filteredEvents);\n        } else {\n            const toBeAppliedEvents = response.filter(x => x.guild === name);\n            const applied = [...filtered, ...toBeAppliedEvents];\n            setFiltered(applied);\n        }\n    };\n\n    return (\n\n        <div className='container2'>\n            <div>\n                <ul className=\"sorting-list\">\n                    {guilds.map((name, index) => {\n                        return (\n                            <li key={index}>\n                                <div className=\"sorting-list-item\">\n                                    <div>\n                                        <input\n                                            type=\"checkbox\"\n                                            id={`custom-checkbox-${index}`}\n                                            name={name}\n                                            value={name}\n                                            checked={checkedState[index]}\n                                            onChange={() => handleChange(index, name)}\n                                        />\n                                        <label htmlFor={`custom-checkbox-${index}`}>{name}</label>\n                                    </div>\n                                </div>\n                            </li>\n                        );\n                    })}\n                </ul>\n            </div>\n            <FullCalendar\n                plugins={[dayGridPlugin, timeGridPlugin, interactionPlugin, momentTimezonePlugin]}\n                initialView=\"dayGridMonth\"\n                eventTimeFormat={{ hour: '2-digit', minute: '2-digit', hour12: false }}\n                firstDay={1}\n                validRange={{\n                    start: setTo1DayOfMonth(),\n                    end: display3MonthsAfter()\n                }}\n                fixedWeekCount={false}\n                eventOverlap={false}\n                events={filtered}\n                eventDisplay={\"list-item\"}\n                nowIndicator={true}\n                eventClick={(e) => {\n                    swal({\n                      title: e.event.title,\n                      text: \"Starting from: \" + e.event.start +\n                      \"\\n Description: \" + e.event.extendedProps.description +\n                      \"\\n Location: \" + e.event.extendedProps.location +\n                      \"\\n Organizer: \" + e.event.extendedProps.guild\n                    })               \n                  }}\n                timeZone=\"Europe/Helsinki\"\n            />\n\n        </div>\n    );\n\n\n\n};\n\n\nexport default Month;"],"mappings":"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"},"metadata":{},"sourceType":"module"}
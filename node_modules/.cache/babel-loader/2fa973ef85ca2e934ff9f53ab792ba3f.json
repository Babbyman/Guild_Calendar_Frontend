{"ast":null,"code":"var _jsxFileName = \"/Users/noora/Development/amplifyapp/ReactApp/src/pages/home.js\",\n    _s2 = $RefreshSig$();\n\nimport React from 'react';\nimport FullCalendar from '@fullcalendar/react';\nimport dayGridPlugin from '@fullcalendar/daygrid';\nimport timeGridPlugin from '@fullcalendar/timegrid';\nimport interactionPlugin from '@fullcalendar/interaction'; //import {useFetch, getNext4MonthsEvents} from '../hooks/useFetch';\n\nimport { Spinner } from 'react-bootstrap';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst Home = () => {\n  _s2();\n\n  var _s = $RefreshSig$();\n\n  const [data, isLoading] = useFetch();\n\n  if (data) {\n    return /*#__PURE__*/_jsxDEV(Spinner, {\n      animation: \"border\",\n      role: \"status\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 14,\n      columnNumber: 5\n    }, this);\n  }\n\n  function useFetch() {\n    _s();\n\n    const [{\n      data,\n      isLoading\n    }, setData] = React.useState({\n      data: [],\n      isLoading: true\n    });\n    React.useEffect(() => {\n      const guilds = ['TIK', 'AK', 'Athene', 'AS', 'IK', 'Inkubio', 'KIK', 'MK', 'PJK', 'PT', 'TF', 'VK'];\n      fetch(\"/events\", {\n        method: 'POST',\n        body: JSON.stringify({\n          guildNames: guilds,\n          startDateTimeFrame: new Date(),\n          endDateTimeFrame: getNext4MonthsEvents()\n        }),\n        headers: {\n          'Content-type': 'application/json; charset=UTF-8'\n        }\n      }).then(res => res.json()).then(data => {\n        var dataString = JSON.stringify(data.response); //console.log(\"dataString \", dataString);\n\n        var result = JSON.parse(dataString); //console.log(\"result \", result);\n\n        setData({\n          data: result,\n          isLoading: false\n        });\n      });\n    }, []);\n    return [isLoading, data];\n  }\n\n  _s(useFetch, \"0uuofH9aFH+aQCUgpFTfOT8Elgo=\");\n\n  function getNext4MonthsEvents() {\n    var date = new Date();\n    date.setMonth(date.getMonth() + 4);\n    return date.toISOString();\n  }\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"container\",\n    children: isLoading.length > 0 && isLoading.map(list => /*#__PURE__*/_jsxDEV(FullCalendar, {\n      plugins: [dayGridPlugin, timeGridPlugin, interactionPlugin],\n      initialView: \"timeGridDay\",\n      contentHeight: \"auto\",\n      validRange: {\n        start: new Date(),\n        end: getNext4MonthsEvents()\n      } //TODO need to add a unique key\n      //dayHeaders={false}\n      ,\n      dayHeaderContent: \"list[0].guild\",\n      dayHeaderClassNames: \"guild-name\",\n      slotMinTime: \"08:00:00\",\n      slotMaxTime: \"24:00:00\",\n      events: list,\n      eventColor: \"#CF9FFF\",\n      nowIndicator: true,\n      dateClick: e => console.log(e.dateStr),\n      eventClick: e => console.log(e.event.id),\n      timeZone: \"Europe/Helsinki\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 57,\n      columnNumber: 8\n    }, this))\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 54,\n    columnNumber: 5\n  }, this);\n};\n\n_s2(Home, \"NmgInhJWaAKMjGOtESybr3nPkRU=\", true);\n\n_c = Home;\nexport default Home;\n\nvar _c;\n\n$RefreshReg$(_c, \"Home\");","map":{"version":3,"names":["React","FullCalendar","dayGridPlugin","timeGridPlugin","interactionPlugin","Spinner","Home","data","isLoading","useFetch","setData","useState","useEffect","guilds","fetch","method","body","JSON","stringify","guildNames","startDateTimeFrame","Date","endDateTimeFrame","getNext4MonthsEvents","headers","then","res","json","dataString","response","result","parse","date","setMonth","getMonth","toISOString","length","map","list","start","end","e","console","log","dateStr","event","id"],"sources":["/Users/noora/Development/amplifyapp/ReactApp/src/pages/home.js"],"sourcesContent":["import React from 'react';\nimport FullCalendar from '@fullcalendar/react';\nimport dayGridPlugin from '@fullcalendar/daygrid';\nimport timeGridPlugin from '@fullcalendar/timegrid';\nimport interactionPlugin from '@fullcalendar/interaction';\n//import {useFetch, getNext4MonthsEvents} from '../hooks/useFetch';\nimport {Spinner } from 'react-bootstrap';\n\nconst Home = () => {\n\n  const [data, isLoading] = useFetch();\n  if(data) {\n    return (\n    <Spinner animation=\"border\" role=\"status\">      \n    </Spinner>\n    )\n  }\n\n  function useFetch() {\n    const [{data, isLoading}, setData] = React.useState({ data: [], isLoading: true });\n    \n    React.useEffect(() => {\n      const guilds = ['TIK', 'AK', 'Athene', 'AS', 'IK', 'Inkubio', 'KIK', 'MK', 'PJK', 'PT', 'TF', 'VK'];\n      fetch(\"/events\", {\n        method: 'POST',\n        body: JSON.stringify({\n          guildNames: guilds,\n          startDateTimeFrame : new Date(),\n          endDateTimeFrame : getNext4MonthsEvents()\n        }),\n        headers: {'Content-type': 'application/json; charset=UTF-8'},\n      })\n        .then((res) => res.json())\n        .then((data) => {\n          var dataString = JSON.stringify(data.response);\n          //console.log(\"dataString \", dataString);\n          var result = JSON.parse(dataString);\n          //console.log(\"result \", result);\n         \n          setData({data: result, isLoading: false})\n        });\n    }, []);\n  \n    return [isLoading, data];\n  }\n  \n  function getNext4MonthsEvents(){\n      var date = new Date();\n      date.setMonth(date.getMonth() + 4);\n      return date.toISOString();\n    }\n\n  return (  \n    <div className='container'>\n      {isLoading.length > 0 && isLoading.map((list) => (\n        \n       <FullCalendar     \n          plugins={[dayGridPlugin, timeGridPlugin, interactionPlugin]}\n          initialView=\"timeGridDay\"\n          contentHeight={\"auto\"}\n          validRange={{\n          start: new Date(),\n          end: getNext4MonthsEvents()\n          }}\n          //TODO need to add a unique key\n        \n          //dayHeaders={false}\n          dayHeaderContent={\"list[0].guild\"}\n          dayHeaderClassNames={\"guild-name\"}\n          slotMinTime={\"08:00:00\"}\n          slotMaxTime={\"24:00:00\"}\n      \n          events={list}\n          eventColor=\"#CF9FFF\"\n          nowIndicator\n          dateClick={(e) => console.log(e.dateStr)}\n          eventClick={(e) => console.log(e.event.id)}\n          timeZone=\"Europe/Helsinki\"\n        />\n      \n         ))}\n      </div>      \n    );\n};\n\nexport default Home;"],"mappings":"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"},"metadata":{},"sourceType":"module"}
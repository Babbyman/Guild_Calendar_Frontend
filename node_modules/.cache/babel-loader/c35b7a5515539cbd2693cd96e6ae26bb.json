{"ast":null,"code":"var _jsxFileName = \"/Users/noora/Development/amplifyapp/ReactApp/src/pages/week.js\",\n    _s = $RefreshSig$();\n\nimport React from 'react';\nimport FullCalendar from '@fullcalendar/react';\nimport dayGridPlugin from '@fullcalendar/daygrid';\nimport timeGridPlugin from '@fullcalendar/timegrid';\nimport interactionPlugin from '@fullcalendar/interaction';\nimport momentTimezonePlugin from '@fullcalendar/moment-timezone';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst Week = () => {\n  _s();\n\n  const [error, setError] = React.useState(false);\n  const [response, setResponse] = React.useState([]);\n  const guilds = ['AK', 'AS', 'Athene', 'IK', 'Inkubio', 'KIK', 'MK', 'PJK', 'PT', 'TIK', 'TF', 'VK', 'Prodeko', 'FK'];\n  const [filtered, setFiltered] = React.useState([]);\n  const [checkedState, setCheckedState] = React.useState(new Array(guilds.length).fill(true));\n\n  async function fetchData(guilds) {\n    try {\n      await Promise.all([await fetch(\"/events\", {\n        method: 'POST',\n        body: JSON.stringify({\n          guildNames: guilds,\n          startDateTimeFrame: get10DaysFromNowEvents(),\n          endDateTimeFrame: getNext4MonthsEvents()\n        }),\n        headers: {\n          'Content-type': 'application/json; charset=UTF-8'\n        }\n      }).then(res => res.json()).then(data => {\n        var dataString = JSON.stringify(data.response);\n        var result = JSON.parse(dataString);\n        var array = [];\n\n        for (let i of result) {\n          array = array.concat(Object.values(i)[0]);\n        }\n\n        console.log(\"array \", array);\n        setResponse(array);\n        setFiltered(array);\n      })]);\n    } catch (error) {\n      console.log(error);\n      setError(true);\n    }\n  }\n\n  React.useEffect(() => {\n    fetchData(guilds);\n  }, []);\n\n  function getNext4MonthsEvents() {\n    var date = new Date();\n    date.setMonth(date.getMonth() + 4);\n    return date.toISOString();\n  }\n\n  function get10DaysFromNowEvents() {\n    var date = new Date();\n    date.setDate(date.getDate() - 10);\n    return date.toISOString();\n  }\n\n  function setToMonday(date) {\n    var day = date.getDay() || 7;\n    if (day !== 1) date.setHours(-24 * (day - 1));\n    return date;\n  }\n\n  if (error) {\n    return /*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \" Oops.. something went wrong! \"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 72,\n      columnNumber: 7\n    }, this);\n  }\n\n  const handleChange = (position, name) => {\n    const updatedCheckedState = checkedState.map((item, index) => index === position ? !item : item);\n    setCheckedState(updatedCheckedState);\n\n    if (checkedState[position] === true) {\n      const filteredEvents = filtered.filter(value => value.guild !== name);\n      setFiltered(filteredEvents);\n    } else {\n      const toBeAppliedEvents = response.filter(x => x.guild === name);\n      const applied = [...filtered, ...toBeAppliedEvents];\n      setFiltered(applied);\n    }\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"container2\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      children: /*#__PURE__*/_jsxDEV(\"ul\", {\n        className: \"sorting-list\",\n        children: guilds.map((name, index) => {\n          return /*#__PURE__*/_jsxDEV(\"li\", {\n            children: /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"sorting-list-item\",\n              children: /*#__PURE__*/_jsxDEV(\"div\", {\n                children: [/*#__PURE__*/_jsxDEV(\"input\", {\n                  type: \"checkbox\",\n                  id: `custom-checkbox-${index}`,\n                  name: name,\n                  value: name,\n                  checked: checkedState[index],\n                  onChange: () => handleChange(index, name)\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 103,\n                  columnNumber: 21\n                }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n                  htmlFor: `custom-checkbox-${index}`,\n                  children: name\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 111,\n                  columnNumber: 21\n                }, this)]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 102,\n                columnNumber: 19\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 101,\n              columnNumber: 17\n            }, this)\n          }, index, false, {\n            fileName: _jsxFileName,\n            lineNumber: 100,\n            columnNumber: 15\n          }, this);\n        })\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 97,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 96,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(FullCalendar, {\n      customButtons: {\n        filterDropdown: {\n          text: 'Filter',\n          click: function () {},\n          className: 'dropdownbtn',\n          icon: 'chevron-down'\n        }\n      },\n      headerToolbar: {\n        start: 'title',\n        center: 'filterDropdown',\n        end: 'today prev,next'\n      },\n      plugins: [dayGridPlugin, timeGridPlugin, interactionPlugin, momentTimezonePlugin],\n      initialView: \"timeGridWeek\",\n      slotMinTime: \"08:00:00\",\n      slotMaxTime: \"24:00:00\",\n      eventTimeFormat: {\n        hour: '2-digit',\n        minute: '2-digit',\n        hour12: false\n      },\n      eventMinHeight: \"50\",\n      firstDay: 1,\n      weekNumbers: true,\n      weekText: \"Week\",\n      dayHeaderFormat: {\n        weekday: 'short',\n        day: 'numeric',\n        month: 'numeric'\n      },\n      validRange: {\n        start: setToMonday(new Date()),\n        end: setToMonday(new Date(getNext4MonthsEvents())).toISOString()\n      },\n      eventOverlap: false //headerToolbar={false}\n      //dayHeaders={false}\n      ,\n      dayHeaderClassNames: \"weekDay\",\n      events: filtered,\n      eventDisplay: \"block\",\n      nowIndicator: true,\n      eventClick: e => console.log(e.event),\n      timeZone: \"Europe/Helsinki\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 119,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 95,\n    columnNumber: 5\n  }, this);\n};\n\n_s(Week, \"ux9TU+2cH7h4+wZ5eCjLF12oFRA=\");\n\n_c = Week;\nexport default Week;\n\nvar _c;\n\n$RefreshReg$(_c, \"Week\");","map":{"version":3,"names":["React","FullCalendar","dayGridPlugin","timeGridPlugin","interactionPlugin","momentTimezonePlugin","Week","error","setError","useState","response","setResponse","guilds","filtered","setFiltered","checkedState","setCheckedState","Array","length","fill","fetchData","Promise","all","fetch","method","body","JSON","stringify","guildNames","startDateTimeFrame","get10DaysFromNowEvents","endDateTimeFrame","getNext4MonthsEvents","headers","then","res","json","data","dataString","result","parse","array","i","concat","Object","values","console","log","useEffect","date","Date","setMonth","getMonth","toISOString","setDate","getDate","setToMonday","day","getDay","setHours","handleChange","position","name","updatedCheckedState","map","item","index","filteredEvents","filter","value","guild","toBeAppliedEvents","x","applied","filterDropdown","text","click","className","icon","start","center","end","hour","minute","hour12","weekday","month","e","event"],"sources":["/Users/noora/Development/amplifyapp/ReactApp/src/pages/week.js"],"sourcesContent":["import React from 'react';\nimport FullCalendar from '@fullcalendar/react';\nimport dayGridPlugin from '@fullcalendar/daygrid';\nimport timeGridPlugin from '@fullcalendar/timegrid';\nimport interactionPlugin from '@fullcalendar/interaction';\nimport momentTimezonePlugin from '@fullcalendar/moment-timezone';\n\nconst Week = () => {\n\n  const [error, setError] = React.useState(false);\n  const [response, setResponse] = React.useState([]);\n  const guilds = ['AK', 'AS', 'Athene', 'IK', 'Inkubio', 'KIK', 'MK', 'PJK', 'PT', 'TIK', 'TF', 'VK', 'Prodeko', 'FK'];\n  const [filtered, setFiltered] = React.useState([]);\n  const [checkedState, setCheckedState] = React.useState(new Array(guilds.length).fill(true));\n\n  async function fetchData(guilds) {\n    try {\n      await Promise.all([\n        (\n          await fetch(\"/events\", {\n            method: 'POST',\n            body: JSON.stringify({\n              guildNames: guilds,\n              startDateTimeFrame: get10DaysFromNowEvents(),\n              endDateTimeFrame: getNext4MonthsEvents()\n            }),\n            headers: { 'Content-type': 'application/json; charset=UTF-8' },\n          }).then((res) => res.json())\n            .then((data) => {\n              var dataString = JSON.stringify(data.response);\n              var result = JSON.parse(dataString);\n              var array = [];\n              for (let i of result) {\n                array = array.concat(Object.values(i)[0]);\n              }\n              console.log(\"array \", array);\n              setResponse(array);\n              setFiltered(array);\n            }))\n      ]);\n    } catch (error) {\n      console.log(error);\n      setError(true);\n    }\n  }\n\n  React.useEffect(() => {\n    fetchData(guilds);\n  }, []);\n\n  function getNext4MonthsEvents() {\n    var date = new Date();\n    date.setMonth(date.getMonth() + 4);\n    return date.toISOString();\n  }\n\n  function get10DaysFromNowEvents() {\n    var date = new Date();\n    date.setDate(date.getDate() - 10);\n    return date.toISOString();\n  }\n\n  function setToMonday(date) {\n    var day = date.getDay() || 7;\n    if (day !== 1)\n      date.setHours(-24 * (day - 1));\n    return date;\n  }\n\n  if (error) {\n    return (\n      <h1> Oops.. something went wrong! </h1>\n    )\n  }\n\n  const handleChange = (position, name) => {\n    const updatedCheckedState = checkedState.map((item, index) =>\n      index === position ? !item : item\n    );\n\n    setCheckedState(updatedCheckedState);\n\n    if (checkedState[position] === true) {\n      const filteredEvents = filtered.filter(value => value.guild !== name);\n      setFiltered(filteredEvents);\n    } else {\n      const toBeAppliedEvents = response.filter(x => x.guild === name);\n      const applied = [...filtered, ...toBeAppliedEvents];\n      setFiltered(applied);\n    }\n  };\n\n  return (\n\n    <div className='container2'>\n      <div>\n        <ul className=\"sorting-list\">\n          {guilds.map((name, index) => {\n            return (\n              <li key={index}>\n                <div className=\"sorting-list-item\">\n                  <div>\n                    <input\n                      type=\"checkbox\"\n                      id={`custom-checkbox-${index}`}\n                      name={name}\n                      value={name}\n                      checked={checkedState[index]}\n                      onChange={() => handleChange(index, name)}\n                    />\n                    <label htmlFor={`custom-checkbox-${index}`}>{name}</label>\n                  </div>\n                </div>\n              </li>\n            );\n          })}\n        </ul>\n      </div>\n      <FullCalendar\n        customButtons={{\n          filterDropdown: {\n              text: 'Filter',\n              click: function() {\n                  \n              },\n              className: 'dropdownbtn',\n              icon:'chevron-down'\n          },\n        }}\n        headerToolbar={{start: 'title',center:'filterDropdown', end:'today prev,next'}}\n        plugins={[dayGridPlugin, timeGridPlugin, interactionPlugin, momentTimezonePlugin]}\n        initialView=\"timeGridWeek\"\n        slotMinTime={\"08:00:00\"}\n        slotMaxTime={\"24:00:00\"}\n        eventTimeFormat={{ hour: '2-digit', minute: '2-digit', hour12: false }}\n        eventMinHeight='50'\n        firstDay={1}\n        weekNumbers={true}\n        weekText={\"Week\"}\n        dayHeaderFormat={{ weekday: 'short', day: 'numeric', month: 'numeric' }}\n        validRange={{\n          start: setToMonday(new Date()),\n          end: setToMonday(new Date(getNext4MonthsEvents())).toISOString()\n        }}\n        eventOverlap={false}\n        //headerToolbar={false}\n        //dayHeaders={false}\n      \n        dayHeaderClassNames={\"weekDay\"}\n        events={filtered}\n        eventDisplay={\"block\"}\n\n        nowIndicator={true}\n        eventClick={(e) => console.log(e.event)}\n        timeZone=\"Europe/Helsinki\"\n      />\n\n    </div>\n  );\n\n\n\n};\n\n\nexport default Week;"],"mappings":"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"},"metadata":{},"sourceType":"module"}
[{"/Users/noora/Development/amplifyapp/ReactApp/src/index.js":"1","/Users/noora/Development/amplifyapp/ReactApp/src/reportWebVitals.js":"2","/Users/noora/Development/amplifyapp/ReactApp/src/App.js":"3","/Users/noora/Development/amplifyapp/ReactApp/src/pages/about.js":"4","/Users/noora/Development/amplifyapp/ReactApp/src/components/Navbar/index.js":"5","/Users/noora/Development/amplifyapp/ReactApp/src/components/Navbar/NavBar.js":"6","/Users/noora/Development/amplifyapp/ReactApp/src/pages/terms.js":"7","/Users/noora/Development/amplifyapp/ReactApp/src/pages/home.js":"8","/Users/noora/Development/amplifyapp/ReactApp/src/hooks/useFetch.js":"9","/Users/noora/Development/amplifyapp/ReactApp/src/pages/week.js":"10","/Users/noora/Development/amplifyapp/ReactApp/src/pages/month.js":"11"},{"size":535,"mtime":1665069547537,"results":"12","hashOfConfig":"13"},{"size":362,"mtime":1664094734294,"results":"14","hashOfConfig":"13"},{"size":780,"mtime":1665381308653,"results":"15","hashOfConfig":"13"},{"size":349,"mtime":1665489466187,"results":"16","hashOfConfig":"13"},{"size":893,"mtime":1665486653000,"results":"17","hashOfConfig":"13"},{"size":792,"mtime":1665487234649,"results":"18","hashOfConfig":"13"},{"size":791,"mtime":1665508380403,"results":"19","hashOfConfig":"13"},{"size":2859,"mtime":1666784545455,"results":"20","hashOfConfig":"13"},{"size":0,"mtime":1665072269550,"results":"21","hashOfConfig":"22"},{"size":5181,"mtime":1666695365614,"results":"23","hashOfConfig":"13"},{"size":5859,"mtime":1666695330516,"results":"24","hashOfConfig":"13"},{"filePath":"25","messages":"26","suppressedMessages":"27","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"12atf99",{"filePath":"28","messages":"29","suppressedMessages":"30","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"31","messages":"32","suppressedMessages":"33","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"34","messages":"35","suppressedMessages":"36","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"37","messages":"38","suppressedMessages":"39","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"40"},{"filePath":"41","messages":"42","suppressedMessages":"43","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"44","messages":"45","suppressedMessages":"46","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"47","messages":"48","suppressedMessages":"49","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"50"},{"filePath":"51","messages":"52","suppressedMessages":"53","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"2rxjs5",{"filePath":"54","messages":"55","suppressedMessages":"56","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"57"},{"filePath":"58","messages":"59","suppressedMessages":"60","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"61"},"/Users/noora/Development/amplifyapp/ReactApp/src/index.js",[],[],"/Users/noora/Development/amplifyapp/ReactApp/src/reportWebVitals.js",[],[],"/Users/noora/Development/amplifyapp/ReactApp/src/App.js",[],[],"/Users/noora/Development/amplifyapp/ReactApp/src/pages/about.js",[],[],"/Users/noora/Development/amplifyapp/ReactApp/src/components/Navbar/index.js",["62"],[],"import React from 'react';\nimport {\nNav,\nNavLink,\nNavMenu,\nNavBtn,\nNavBtnLink,\n} from './NavBar';\nimport './NavStyles.css'\n\nconst Navbar = () => {\n\t\n\treturn (\n\t\t<>\n\t\t<Nav>\n\t\t\t\t<NavLink to='/' >\n\t\t\t\t\t<h1>WhatsTheHaps?</h1>\n\t\t\t\t</NavLink>\n\t\t\t\t<div className='viewButtons'> \n\t\t\t\t<NavBtn >\n\t\t\t\t\t<NavBtnLink to='/'>Day view</NavBtnLink>\n\t\t\t\t</NavBtn>\n\t\t\t\t<NavBtn >\n\t\t\t\t\t<NavBtnLink to='/week'>Week view</NavBtnLink>\n\t\t\t\t</NavBtn>\n\t\t\t\t<NavBtn >\n\t\t\t\t\t<NavBtnLink to='/month'>Month view</NavBtnLink>\n\t\t\t\t</NavBtn>\n\t\t\t\t</div>\n\t\t\t\t\t<div className=\"dropdown\">\n\t\t\t\t\t<button className=\"dropbtn\">Menu\n\t\t\t\t\t\t<i className=\"arrow down\"></i>\n\t\t\t\t\t</button>\n\t\t\t\t\t<div className=\"dropdown-content\">\t\t\n\t\t\t\t\t\t<NavLink to='/about'>\n\t\t\t\t\t\t\tAbout us\n\t\t\t\t\t\t</NavLink>\t\t\n\t\t\t\t\t\t<NavLink to='/terms'>\n\t\t\t\t\t\t\tTerms and conditions\n\t\t\t\t\t\t</NavLink>\n\t\t\t\t\t</div>\n\t\t\t\t</div>\t\n\t\t\t\t\n\n\t\t</Nav>\n\t\t</>\n\t);\n};\n\nexport default Navbar;\n","/Users/noora/Development/amplifyapp/ReactApp/src/components/Navbar/NavBar.js",[],[],"/Users/noora/Development/amplifyapp/ReactApp/src/pages/terms.js",[],[],"/Users/noora/Development/amplifyapp/ReactApp/src/pages/home.js",["63"],[],"import React from 'react';\nimport FullCalendar from '@fullcalendar/react';\nimport dayGridPlugin from '@fullcalendar/daygrid';\nimport timeGridPlugin from '@fullcalendar/timegrid';\nimport interactionPlugin from '@fullcalendar/interaction';\nimport momentTimezonePlugin from '@fullcalendar/moment-timezone';\nimport swal from 'sweetalert';\n\n\n\nconst Home = () => {\n\n  const [error, setError] = React.useState(false);\n  const [response, setResponse] = React.useState([]);\n\n \n  async function fetchData() {\n    try {\n      const guilds = ['AK', 'AS', 'Athene', 'IK', 'Inkubio', 'KIK', 'MK', 'PJK', 'PT', 'TIK', 'TF', 'VK', 'Prodeko', 'FK'];\n      await Promise.all([\n       (\n         await fetch(\"/events\", {\n          method: 'POST',\n          body: JSON.stringify({\n            guildNames: guilds,\n            startDateTimeFrame : new Date(),\n            endDateTimeFrame : getNext4MonthsEvents()\n          }),\n          headers: {'Content-type': 'application/json; charset=UTF-8'},\n        }).then((res) => res.json())\n        .then((data) => {\n          var dataString = JSON.stringify(data.response);\n          var result = JSON.parse(dataString);    \n          setResponse(result);\n        }))\n     ]);\n   } catch (error) {\n     console.log(error);\n     setError(true);\n   }\n }\n \n React.useEffect(() => {\n   fetchData();\n }, []);\n\n function getNext4MonthsEvents(){\n  var date = new Date();\n  date.setMonth(date.getMonth() + 4);\n  return date.toISOString();\n}\n\n if(error) {\n  return (\n  <h1> Oops.. something went wrong! </h1>\n  )\n}\n\nreturn (  \n  \n  <div className='container'>\n    {response.length > 0 && response.map((list) =>  (\n      \n     <FullCalendar     \n        plugins={[dayGridPlugin, timeGridPlugin, interactionPlugin, momentTimezonePlugin]}\n        initialView=\"timeGridDay\"\n        contentHeight={\"auto\"}\n        validRange={{\n        start: new Date(),\n        end: getNext4MonthsEvents()\n        }}\n        eventTimeFormat={{hour:'2-digit', minute: '2-digit', hour12: false}}\n        //headerToolbar={false}\n        //dayHeaders={false}\n        dayHeaderContent={Object.keys(list)[0]}\n        dayHeaderClassNames={\"guild-name \" + Object.keys(list)[0] }\n        slotMinTime={\"08:00:00\"}\n        slotMaxTime={\"24:00:00\"}\n        key={Object.keys(list)[0]}\n        events={Object.values(list)[0]}\n        //eventColor=\"#CF9FFF\"\n        eventColor={list.color}\n        nowIndicator\n        eventClick={(e) => {\n          swal({\n            title: e.event.title,\n            text: \"Starting from: \" + e.event.start +\n            \"\\n Description: \" + e.event.extendedProps.description +\n            \"\\n Location: \" + e.event.extendedProps.location +\n            \"\\n Organizer: \" + e.event.extendedProps.guild\n\n          })\n          \n        }}\n        timeZone=\"Europe/Helsinki\"\n      />\n    \n    ))}\n    </div>      \n  );\n\n\n\n};\n\nexport default Home;","/Users/noora/Development/amplifyapp/ReactApp/src/hooks/useFetch.js",[],[],"/Users/noora/Development/amplifyapp/ReactApp/src/pages/week.js",["64"],[],"import React from 'react';\nimport FullCalendar from '@fullcalendar/react';\nimport dayGridPlugin from '@fullcalendar/daygrid';\nimport timeGridPlugin from '@fullcalendar/timegrid';\nimport interactionPlugin from '@fullcalendar/interaction';\nimport momentTimezonePlugin from '@fullcalendar/moment-timezone';\nimport '../components/Navbar/NavStyles.css';\nimport swal from 'sweetalert';\n\nconst Week = () => {\n\n  const [error, setError] = React.useState(false);\n  const [response, setResponse] = React.useState([]);\n  const guilds = ['AK', 'AS', 'Athene', 'IK', 'Inkubio', 'KIK', 'MK', 'PJK', 'PT', 'TIK', 'TF', 'VK', 'Prodeko', 'FK'];\n  const [filtered, setFiltered] = React.useState([]);\n  const [checkedState, setCheckedState] = React.useState(new Array(guilds.length).fill(true));\n\n  async function fetchData(guilds) {\n    try {\n      await Promise.all([\n        (\n          await fetch(\"/events\", {\n            method: 'POST',\n            body: JSON.stringify({\n              guildNames: guilds,\n              startDateTimeFrame: get10DaysFromNowEvents(),\n              endDateTimeFrame: getNext4MonthsEvents()\n            }),\n            headers: { 'Content-type': 'application/json; charset=UTF-8' },\n          }).then((res) => res.json())\n            .then((data) => {\n              var dataString = JSON.stringify(data.response);\n              var result = JSON.parse(dataString);\n              var array = [];\n              for (let i of result) {\n                array = array.concat(Object.values(i)[0]);\n              }\n              setResponse(array);\n              setFiltered(array);\n            }))\n      ]);\n    } catch (error) {\n      console.log(error);\n      setError(true);\n    }\n  }\n\n  React.useEffect(() => {\n    fetchData(guilds);\n  }, []);\n\n  function getNext4MonthsEvents() {\n    var date = new Date();\n    date.setMonth(date.getMonth() + 4);\n    return date.toISOString();\n  }\n\n  function get10DaysFromNowEvents() {\n    var date = new Date();\n    date.setDate(date.getDate() - 10);\n    return date.toISOString();\n  }\n\n  function setToMonday(date) {\n    var day = date.getDay() || 7;\n    if (day !== 1)\n      date.setHours(-24 * (day - 1));\n    return date;\n  }\n\n  if (error) {\n    return (\n      <h1> Oops.. something went wrong! </h1>\n    )\n  }\n\n  const handleChange = (position, name) => {\n    const updatedCheckedState = checkedState.map((item, index) =>\n      index === position ? !item : item\n    );\n\n    setCheckedState(updatedCheckedState);\n\n    if (checkedState[position] === true) {\n      const filteredEvents = filtered.filter(value => value.guild !== name);\n      setFiltered(filteredEvents);\n    } else {\n      const toBeAppliedEvents = response.filter(x => x.guild === name);\n      const applied = [...filtered, ...toBeAppliedEvents];\n      setFiltered(applied);\n    }\n  };\n\n  return (\n\n    <div className='container2'>\n      <div>\n        <ul className=\"sorting-list\">\n          {guilds.map((name, index) => {\n            return (\n              <li key={index}>\n                <div className=\"sorting-list-item\">\n                  <div>\n                    <input\n                      type=\"checkbox\"\n                      id={`custom-checkbox-${index}`}\n                      name={name}\n                      value={name}\n                      checked={checkedState[index]}\n                      onChange={() => handleChange(index, name)}\n                    />\n                    <label htmlFor={`custom-checkbox-${index}`}>{name}</label>\n                  </div>\n                </div>\n              </li>\n            );\n          })}\n        </ul>\n      </div>\n      <FullCalendar\n        customButtons={{\n          filterDropdown: {\n            text: 'Filter',\n            click: function(){\n              alert('clicked the custom button!');\n            }\n        }\n        }}\n        headerToolbar={{start: 'title',end:'filterDropdown today prev,next'}}\n        plugins={[dayGridPlugin, timeGridPlugin, interactionPlugin, momentTimezonePlugin]}\n        initialView=\"timeGridWeek\"\n        slotMinTime={\"08:00:00\"}\n        slotMaxTime={\"24:00:00\"}\n        eventTimeFormat={{ hour: '2-digit', minute: '2-digit', hour12: false }}\n        eventMinHeight='50'\n        firstDay={1}\n        weekNumbers={true}\n        weekText={\"Week\"}\n        dayHeaderFormat={{ weekday: 'short', day: 'numeric', month: 'numeric' }}\n        validRange={{\n          start: setToMonday(new Date()),\n          end: setToMonday(new Date(getNext4MonthsEvents())).toISOString()\n        }}\n        eventOverlap={false}\n        //headerToolbar={false}\n        //dayHeaders={false}\n      \n        dayHeaderClassNames={\"weekDay\"}\n        events={filtered}\n        eventDisplay={\"block\"}\n\n        nowIndicator={true}\n        eventClick={(e) => {\n          swal({\n            title: e.event.title,\n            text: \"Starting from: \" + e.event.start +\n            \"\\n Description: \" + e.event.extendedProps.description +\n            \"\\n Location: \" + e.event.extendedProps.location +\n            \"\\n Organizer: \" + e.event.extendedProps.guild\n          })               \n        }}\n        timeZone=\"Europe/Helsinki\"\n      />\n\n    </div>\n  );\n\n\n\n};\n\n\nexport default Week;","/Users/noora/Development/amplifyapp/ReactApp/src/pages/month.js",["65"],[],"import React from 'react';\nimport FullCalendar from '@fullcalendar/react';\nimport dayGridPlugin from '@fullcalendar/daygrid';\nimport timeGridPlugin from '@fullcalendar/timegrid';\nimport interactionPlugin from '@fullcalendar/interaction';\nimport momentTimezonePlugin from '@fullcalendar/moment-timezone';\nimport swal from 'sweetalert';\n\nconst Month = () => {\n\n    const [error, setError] = React.useState(false);\n    const [response, setResponse] = React.useState([]);\n    const guilds = ['AK', 'AS', 'Athene', 'IK', 'Inkubio', 'KIK', 'MK', 'PJK', 'PT', 'TIK', 'TF', 'VK', 'Prodeko', 'FK'];\n    const [filtered, setFiltered] = React.useState([]);\n    const [checkedState, setCheckedState] = React.useState(new Array(guilds.length).fill(true));\n\n    async function fetchData() {\n        try {\n            await Promise.all([\n                (\n                    await fetch(\"/events\", {\n                        method: 'POST',\n                        body: JSON.stringify({\n                            guildNames: guilds,\n                            startDateTimeFrame: getOneMonthFromNowEvents(),\n                            endDateTimeFrame: getNext3MonthsEvents()\n                        }),\n                        headers: { 'Content-type': 'application/json; charset=UTF-8' },\n                    }).then((res) => res.json())\n                        .then((data) => {\n                            var dataString = JSON.stringify(data.response);\n                            var result = JSON.parse(dataString);\n                            var array = [];\n                            for (let i of result) {\n                                array = array.concat(Object.values(i)[0]);\n                            }\n                            console.log(\"array \", array);\n                            setResponse(array);\n                            setFiltered(array);\n                        }))\n            ]);\n        } catch (error) {\n            console.log(error);\n            setError(true);\n        }\n    }\n\n    React.useEffect(() => {\n        fetchData();\n    }, []);\n\n    function getNext3MonthsEvents() {\n        var date = new Date();\n        date.setMonth(date.getMonth() + 3);\n        return date.toISOString();\n    }\n\n    function display3MonthsAfter() {\n        const setTo1Day = new Date(setTo1DayOfMonth());\n        setTo1Day.setMonth(setTo1Day.getMonth() + 3);\n        return setTo1Day.toISOString();\n    }\n\n    function setTo1DayOfMonth() {\n        const currentDate = new Date();\n        const setTo1DayOfMonth = new Date(currentDate.getFullYear(), currentDate.getMonth(), 1);\n        return setTo1DayOfMonth.toISOString();\n\n    }\n\n    function getOneMonthFromNowEvents() {\n        var date = new Date();\n        date.setDate(date.getDate() - 31);\n        return date.toISOString();\n    }\n\n    if (error) {\n        return (\n            <h1> Oops.. something went wrong! </h1>\n        )\n    }\n\n    const handleChange = (position, name) => {\n        const updatedCheckedState = checkedState.map((item, index) =>\n            index === position ? !item : item\n        );\n\n        setCheckedState(updatedCheckedState);\n\n        if (checkedState[position] === true) {\n            const filteredEvents = filtered.filter(value => value.guild !== name);\n            setFiltered(filteredEvents);\n        } else {\n            const toBeAppliedEvents = response.filter(x => x.guild === name);\n            const applied = [...filtered, ...toBeAppliedEvents];\n            setFiltered(applied);\n        }\n    };\n\n    return (\n\n        <div className='container2'>\n            <div>\n                <ul className=\"sorting-list\">\n                    {guilds.map((name, index) => {\n                        return (\n                            <li key={index}>\n                                <div className=\"sorting-list-item\">\n                                    <div>\n                                        <input\n                                            type=\"checkbox\"\n                                            id={`custom-checkbox-${index}`}\n                                            name={name}\n                                            value={name}\n                                            checked={checkedState[index]}\n                                            onChange={() => handleChange(index, name)}\n                                        />\n                                        <label htmlFor={`custom-checkbox-${index}`}>{name}</label>\n                                    </div>\n                                </div>\n                            </li>\n                        );\n                    })}\n                </ul>\n            </div>\n            <FullCalendar\n                plugins={[dayGridPlugin, timeGridPlugin, interactionPlugin, momentTimezonePlugin]}\n                initialView=\"dayGridMonth\"\n                eventTimeFormat={{ hour: '2-digit', minute: '2-digit', hour12: false }}\n                firstDay={1}\n                validRange={{\n                    start: setTo1DayOfMonth(),\n                    end: display3MonthsAfter()\n                }}\n                fixedWeekCount={false}\n                eventOverlap={false}\n                events={filtered}\n                eventDisplay={\"list-item\"}\n                nowIndicator={true}\n                eventClick={(e) => {\n                    swal({\n                      title: e.event.title,\n                      text: \"Starting from: \" + e.event.start +\n                      \"\\n Description: \" + e.event.extendedProps.description +\n                      \"\\n Location: \" + e.event.extendedProps.location +\n                      \"\\n Organizer: \" + e.event.extendedProps.guild\n                    })               \n                  }}\n                timeZone=\"Europe/Helsinki\"\n            />\n\n        </div>\n    );\n\n\n\n};\n\n\nexport default Month;",{"ruleId":"66","severity":1,"message":"67","line":5,"column":1,"nodeType":"68","messageId":"69","endLine":5,"endColumn":8},{"ruleId":"70","severity":1,"message":"71","line":45,"column":5,"nodeType":"72","endLine":45,"endColumn":7,"suggestions":"73"},{"ruleId":"70","severity":1,"message":"74","line":50,"column":6,"nodeType":"72","endLine":50,"endColumn":8,"suggestions":"75"},{"ruleId":"70","severity":1,"message":"71","line":50,"column":8,"nodeType":"72","endLine":50,"endColumn":10,"suggestions":"76"},"no-unused-vars","'NavMenu' is defined but never used.","Identifier","unusedVar","react-hooks/exhaustive-deps","React Hook React.useEffect has a missing dependency: 'fetchData'. Either include it or remove the dependency array.","ArrayExpression",["77"],"React Hook React.useEffect has missing dependencies: 'fetchData' and 'guilds'. Either include them or remove the dependency array.",["78"],["79"],{"desc":"80","fix":"81"},{"desc":"82","fix":"83"},{"desc":"80","fix":"84"},"Update the dependencies array to be: [fetchData]",{"range":"85","text":"86"},"Update the dependencies array to be: [fetchData, guilds]",{"range":"87","text":"88"},{"range":"89","text":"86"},[1324,1326],"[fetchData]",[1754,1756],"[fetchData, guilds]",[2072,2074]]